var documenterSearchIndex = {"docs":
[{"location":"tutorials/julia/","page":"Getting started with Julia","title":"Getting started with Julia","text":"using Cropbox","category":"page"},{"location":"tutorials/julia/#Julia","page":"Getting started with Julia","title":"Getting Started with Julia","text":"","category":"section"},{"location":"tutorials/julia/","page":"Getting started with Julia","title":"Getting started with Julia","text":"Julia is a relatively new programming language designed for scientific computing in mind. It is a dynamic programming language as convenient as Python and R, but also provides high performance and extensibility as C/C++ and Fortran. Check the chart here to see where Julia stands as a programming language among other languages today; its position has been rising fast.","category":"page"},{"location":"tutorials/julia/","page":"Getting started with Julia","title":"Getting started with Julia","text":"If you already have a fair understanding of Julia or would like to skip ahead to learning about Cropbox, please go to Getting Started With Cropbox.","category":"page"},{"location":"tutorials/julia/#Installing-Julia","page":"Getting started with Julia","title":"Installing Julia","text":"","category":"section"},{"location":"tutorials/julia/","page":"Getting started with Julia","title":"Getting started with Julia","text":"You can download and install Julia from the official Julia downloads page. For new users, it is recommended to install the \"Current stable release\" for Julia. In general, you will want to install the 64-bit version. If you run into an issue installing the 64-bit version, you can try the 32-bit version. During installation, select \"Add Julia to PATH\". You can also add Julia to PATH after installation using the command-line interface (CLI).","category":"page"},{"location":"tutorials/julia/","page":"Getting started with Julia","title":"Getting started with Julia","text":"For more detailed platform-specific instructions, you can check the official Julia instructions.","category":"page"},{"location":"tutorials/julia/","page":"Getting started with Julia","title":"Getting started with Julia","text":"If you are new to coding and require a development environment, check the Installation section for more information.","category":"page"},{"location":"tutorials/julia/#The-Julia-REPL","page":"Getting started with Julia","title":"The Julia REPL","text":"","category":"section"},{"location":"tutorials/julia/","page":"Getting started with Julia","title":"Getting started with Julia","text":"The quickest way to start using Julia is by opening the Julia executable or by running the command [julia] in your terminal or command prompt. In order to run [julia] from your terminal or command prompt, make sure that Julia is added to your PATH. ","category":"page"},{"location":"tutorials/julia/","page":"Getting started with Julia","title":"Getting started with Julia","text":"By doing so, you can start an interactive session of Julia, also known as the REPL, which stands for \"Read-Eval-Print Loop\".","category":"page"},{"location":"tutorials/julia/","page":"Getting started with Julia","title":"Getting started with Julia","text":"Using the REPL, you can start running simple commands like the following:","category":"page"},{"location":"tutorials/julia/","page":"Getting started with Julia","title":"Getting started with Julia","text":"a = 1\nb = 2\nc = a + b","category":"page"},{"location":"tutorials/julia/#Variables","page":"Getting started with Julia","title":"Variables","text":"","category":"section"},{"location":"tutorials/julia/","page":"Getting started with Julia","title":"Getting started with Julia","text":"Variables in Julia refer to names that are associated with a value. The names can be associated with various different types of values. Take a look at the following example:","category":"page"},{"location":"tutorials/julia/","page":"Getting started with Julia","title":"Getting started with Julia","text":"a = 1\n\nb = \"string\"\n\nc = [a, b]\n\nd = @system D","category":"page"},{"location":"tutorials/julia/","page":"Getting started with Julia","title":"Getting started with Julia","text":"warning: Warning\nJulia variables are not to be confused with Cropbox variables defined within Cropbox systems.","category":"page"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/#Installing-Julia","page":"Installation","title":"Installing Julia","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Cropbox is a domain-specific language (DSL) for Julia. To use Cropbox, you must first download and install Julia. For new users, it is recommended to install the \"Current stable release\" for Julia. In general, you will want to install the 64-bit version. If you run into an issue installing the 64-bit version, you can try the 32-bit version. During installation, select \"Add Julia to PATH\". You can also add Julia to PATH after installation using the terminal.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"export PATH=\"$PATH:/path/to/<Julia directory>/bin\"","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"For more detailed platform-specific instructions, you can check the official Julia instructions.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Once Julia is added to PATH, the interactive REPL can be started by double-clicking the Julia executable or running julia from the command line. ","category":"page"},{"location":"installation/#Using-JupyterLab","page":"Installation","title":"Using JupyterLab","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"While you can technically use the terminal or command prompt to run your code, it may be convenient to use an integrated development environment (IDE) or an interactive platform like JupyterLab. To add the Julia kernel to Jupyter, launch the REPL and add the IJulia package. ","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg\nPkg.add(\"IJulia\")","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"When you launch Jupyter, you should now be able to select a Julia kernel to run your notebook. ","category":"page"},{"location":"installation/#Installing-Cropbox","page":"Installation","title":"Installing Cropbox","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Cropbox.jl is available through Julia package manager and can be installed using the Julia REPL.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg\nPkg.add(\"Cropbox\")","category":"page"},{"location":"installation/#Using-Docker","page":"Installation","title":"Using Docker","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"If you would like to skip the process of installing Julia and Cropbox on your machine, there is a Docker image with Cropbox precompiled for convenience. Install Docker Desktop on your machine by following the instructions on the website and run the following command in the terminal or command prompt. ","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"$ docker run -it --rm -p 8888:8888 cropbox/cropbox","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"By default, this will launch a JupyterLab session that you can access by opening the printed URL in your browser. ","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"If REPL is preferred, you can directly launch an instance of Julia session.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"docker run -it --rm cropbox/cropbox julia\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.6.1 (2021-04-23)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\njulia>","category":"page"},{"location":"installation/#Using-Binder","page":"Installation","title":"Using Binder","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"The docker image can be also launched via Binder without installing anything locally. This method is the least recommended due to its timeout duration.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"(Image: Binder)","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"using Cropbox","category":"page"},{"location":"tutorials/cropbox/#cropbox","page":"Getting started with Cropbox","title":"Getting Started with Cropbox","text":"","category":"section"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"This tutorial will cover basic macros and functions of Cropbox.","category":"page"},{"location":"tutorials/cropbox/#Installing-Cropbox","page":"Getting started with Cropbox","title":"Installing Cropbox","text":"","category":"section"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"Cropbox.jl is available through Julia package manager.","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"You can install Cropbox running the following command in the Julia REPL.","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"using Pkg\nPkg.add(\"Cropbox\")","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"If you are using a prebuilt docker image with Cropbox included, you can skip this step.","category":"page"},{"location":"tutorials/cropbox/#Package-Loading","page":"Getting started with Cropbox","title":"Package Loading","text":"","category":"section"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"When using Cropbox, make sure to load the package into the environment by using the following command:","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"using Cropbox","category":"page"},{"location":"tutorials/cropbox/#Creating-a-System","page":"Getting started with Cropbox","title":"Creating a System","text":"","category":"section"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"In Cropbox, a model is defined by a single system or a collection of systems.","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"A system can be made by using a simple Cropbox macro, @system.","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"@system S","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"We have just created a system called S. In its current state, S is an empty system with no variables. Our next step is to define the variables that will represent our system.","category":"page"},{"location":"tutorials/cropbox/#Defining-Variables","page":"Getting started with Cropbox","title":"Defining Variables","text":"","category":"section"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"Suppose we want the system to represent exponential growth described by this differential equation","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"fracdxdt = ax","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"In Cropbox, we could define the system with the following:","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"@system S(Controller) begin\n    i       => 1   ~ preserve\n    a       => 0.1 ~ preserve(parameter)\n    r(a, x) => a*x ~ track\n    x(r)           ~ accumulate(init = i)\nend","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"Here we declared four variables.","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"i: variable containing initial value of x which never changes (preserved)\na: variable containing constant parameter of exponential growth\nr: rate variable which needs to be calculated or tracked every time step\nx: state variable which accumulates by rate r over time with initial value i","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"Each variable has been declared with a state, such as preserve or track, that describes its behavior when the system is instantiated. In Cropbox, there are 19 different variable states, which are described in more detail in the Variable section of the Manual. ","category":"page"},{"location":"tutorials/cropbox/#Configuring-Parameters","page":"Getting started with Cropbox","title":"Configuring Parameters","text":"","category":"section"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"In modeling, we often need to change the value of a parameter for different systems or species. We can change the value of variables declared with the paramater tag before running the model by creating a config with the new value. For example, we could change the value of parameter a in system S to be .05 and then create an instance of S with this new value.  ","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"config = @config(:S => :a => .05)\ninstance(S; config)","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"Multiple parameters can be specified using tuples or named tuples. ","category":"page"},{"location":"tutorials/cropbox/#Tuple-of-Pairs","page":"Getting started with Cropbox","title":"Tuple of Pairs","text":"","category":"section"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"@config :S => (:a => 1, :b => 2)","category":"page"},{"location":"tutorials/cropbox/#Named-Tuples","page":"Getting started with Cropbox","title":"Named Tuples","text":"","category":"section"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"@config :S => (a = 1, b = 2)","category":"page"},{"location":"tutorials/cropbox/#Simulation","page":"Getting started with Cropbox","title":"Simulation","text":"","category":"section"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"The simulate function will create an instance of the system and update the values of all the variables in it at each time step until it reaches the stop time. By default, simulations in Cropbox use a time step of one hour. ","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"Let's use Cropbox to simulate the system for ten time steps.","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"df = simulate(S, config = config, stop = 10)","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"This will output the values of all the variables in the system as a DataFrame where each row represents one time step. ","category":"page"},{"location":"tutorials/cropbox/#Visualization","page":"Getting started with Cropbox","title":"Visualization","text":"","category":"section"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"Once we have simulated the system, we may want to visualize the resulting data by creating a graph. This can be done by using the plot() function, specifying the name of the dataframe as the first argument and then the names of variables we want to plot on the x and y axes. ","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"p = plot(df, :time, :x)","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"The visualize() function can also be used to run a simulation and plot the results using one command. ","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"v = visualize(S, :time, :x ; stop=50, kind=:line)","category":"page"},{"location":"tutorials/cropbox/#Evaluation","page":"Getting started with Cropbox","title":"Evaluation","text":"","category":"section"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"The evaluate() function can be used to compare two datasets with a choice of evaluation metric, such as root-mean-square error. For instance, we could compare a dataset of the observed values from an experiment to the estimated values from a simulation. To do this, we would enter in the observed dataset as a DataFrame.","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"using DataFrames\nobs = DataFrame(time = [0.0 ,1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]u\"hr\", x = [1, .985, 1.06, 1.15, 1.14, 1.17, 1.24, 1.34, 1.76, 1.53, 1.68])\nest = simulate(S, config = config, stop = 10)","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"We compare this dataset to the results of the simulation visually by adding it to the our previous plot p using the plot!() function. ","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"plot!(p,obs, :time, :x)","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"Then, we can use the evaluate() function to calculate the error between the observed and simulated values. The index will be time by default and the target will be the variables we want to compare. ","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"evaluate(obs, df; index = :time, target = :x, metric = :rmse)","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"In addition to being able to compare two DataFrames, the evaluate() function can also be used to compare a system to a DataFrame.","category":"page"},{"location":"tutorials/cropbox/","page":"Getting started with Cropbox","title":"Getting started with Cropbox","text":"evaluate(S, est; target = :a, stop = 10)","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"using Cropbox","category":"page"},{"location":"guide/visualization/#Visualization","page":"Visualization","title":"Visualization","text":"","category":"section"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"There are three main functions in Cropbox used for visualization. For information regarding syntax, please check the reference.","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"plot()\nvisualize()\nmanipulate()","category":"page"},{"location":"guide/visualization/#plot","page":"Visualization","title":"plot()","text":"","category":"section"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"The plot() function is used to plot two-dimensional graphs.","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"Two Vectors","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"Let's start by making a simple plot by using two vectors of discrete values.","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"x = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8, 10]\n\nplot(x, y)","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"\n Multiple Vectors","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"You can also plot multiple series, by using a vector of vectors.","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"plot(x, [x, y])","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"\n DataFrame","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"We can also make a plot using a DataFrame and its columns. Recall that the simulate() function provides a DataFrame.","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"@system S(Controller) begin\n    x ~ advance\n    y1(x) => 2x ~ track\n    y2(x) => x^2 ~ track\nend\n\ndf = simulate(S; stop=10)\n\np = plot(df, :x, [:y1, :y2])","category":"page"},{"location":"guide/visualization/#plot!()","page":"Visualization","title":"plot!()","text":"","category":"section"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"plot!() is an extension of the plot() function used to update an existing Plot object p by appending a new graph made with plot()","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"Example","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"@system S(Controller) begin\n    x ~ advance\n    y3(x) => 3x ~ track\nend\n\ndf = simulate(S; stop=10)\n\nplot!(p, df, :x, :y3)","category":"page"},{"location":"guide/visualization/#visualize","page":"Visualization","title":"visualize()","text":"","category":"section"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"The visualize() function is used to make a plot from an output collected by running simulations. It is essentially identical to running the plot() function with a DataFrame from the simulate() function, and can be seen as a convenient function to run both plot() and simulate() together.","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"Example","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"@system S(Controller) begin\n    x ~ advance\n    y1(x) => 2x ~ track\n    y2(x) => x^2 ~ track\nend\n\nv = visualize(S, :x, [:y1, :y2]; stop=10, kind=:line)","category":"page"},{"location":"guide/visualization/#visualize!()","page":"Visualization","title":"visualize!()","text":"","category":"section"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"visualize!() updates an existing Plot object p by appending a new graph generated with visualize(). ","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"Example","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"@system S(Controller) begin\n    x ~ advance\n    y3(x) => 3x ~ track\nend\n\nvisualize!(v, S, :x, :y3; stop=10, kind=:line)","category":"page"},{"location":"guide/visualization/#manipulate","page":"Visualization","title":"manipulate()","text":"","category":"section"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"The manipulate function has two different methods for creating an interactive plot.","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"manipulate(f::Function; parameters, config=())","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"Create an interactive plot updated by callback f. Only works in Jupyter Notebook.","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"manipulate(args...; parameters, kwargs...)","category":"page"},{"location":"guide/visualization/","page":"Visualization","title":"Visualization","text":"Create an interactive plot by calling manipulate with visualize as a callback.","category":"page"},{"location":"reference/inspection/#Inspection1","page":"Inspection","title":"Inspection","text":"","category":"section"},{"location":"reference/inspection/","page":"Inspection","title":"Inspection","text":"@look\ndive","category":"page"},{"location":"reference/inspection/#Cropbox.@look","page":"Inspection","title":"Cropbox.@look","text":"@look ex\n@look s[, k]\n\nMacro version of look supports a convenient way of accessing variable without relying on symbol. Both @look s.a and @look s a work the same as look(s, :a).\n\nSee also: look\n\nExamples\n\njulia> \"my system\"\n       @system S(Controller) begin\n           \"a param\"\n           a => 1 ~ preserve(parameter)\n       end;\n\njulia> @look S.a\n[doc]\n  a param\n\n[code]\n  a => 1 ~ preserve(parameter)\n\n\n\n\n\n","category":"macro"},{"location":"reference/inspection/#Cropbox.dive","page":"Inspection","title":"Cropbox.dive","text":"dive(s)\n\nInspect an instance of system s by navigating hierarchy of variables displayed in a tree structure.\n\nPressing up/down arrow keys allows navigation. Press 'enter' to dive into a deeper level and press 'q' to come back. A leaf node of the tree shows an output of look regarding the variable. Pressing 'enter' again would return a variable itself and exit to REPL.\n\nOnly works in a terminal environment; not working on Jupyter Notebook.\n\nSee also: look\n\nArguments\n\ns::System: instance of target system.\n\nExamples\n\njulia> @system S(Controller) begin\n           a => 1 ~ preserve(parameter)\n       end;\n\njulia> s = instance(S);\n\njulia> dive(s)\nS\n → context = <Context>\n   config = <Config>\n   a = 1.0\n\n\n\n\n\n","category":"function"},{"location":"faq/","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"warning: Warning\nThis page is incomplete.","category":"page"},{"location":"faq/#Frequently-Asked-Questions","page":"Frequently Asked Questions","title":"Frequently Asked Questions","text":"","category":"section"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"using Cropbox\nusing DataFrames","category":"page"},{"location":"guide/configuration/#Configuration1","page":"Configuration","title":"Configuration","text":"","category":"section"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"In Cropbox, Config is a configuration object structured as a nested dictionary or a hash table. It stores user-defined parameter values as a triplet of system - variable - value. Providing a configuration object with specific parameter values during instantiation of a system allows the user to insert or replace values for parameter variables within the system. ","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"For a variable to be eligible for adjustment through a configuration, the variable must have the parameter tag. There are six possible variable states that have access to the parameter tag: preserve, flag, provide, drive, tabulate, and interpolate. The type of value that you assign in a configuration will vary depending on the variable state. For example, a configuration for a flag variable will contain an expression that can be evaluated as true or false.","category":"page"},{"location":"guide/configuration/#Creating-a-Configuration","page":"Configuration","title":"Creating a Configuration","text":"","category":"section"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"Configurations are created using the @config macro. ","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"A basic unit of configuration for a system S is represented as a pair in the form of S => p (p represents a parameter). The parameter variable and its corresponding value is represented as another pair in the form of p => v. In other words, a configuration is created by pairing system S to a pairing of parameter variable and value p => v, like so: :S => :p => v.","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"Example","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"Here is an example of changing the value of a parameter variable using a configuration.","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"@system S(Controller) begin\n    a => 1 ~ preserve(parameter)\n    b => 2 ~ preserve(parameter)\nend\n\nconfig = @config(:S => :a => 2)\n\ninstance(S; config)","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"In system S, the variable a is a preserve variable with the value of 1. Because the variable has the parameter tag, its value can be reassigned with a configuration at instantiation.","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"note: Note\nA configuration can be used to change the value of any parameter variable within a system. This includes parameters variables within built-in systems such as Clock and Calendar.","category":"page"},{"location":"guide/configuration/#Syntax","page":"Configuration","title":"Syntax","text":"","category":"section"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"The @config macro accepts a number of different syntaxes to create a configuration object.","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"Below is an example of creating the most basic configuration. Note that the system S is written as a symbol.","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"@config :S => :a => 2","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"note: Note\nWhen creating a configuration for a system, the system name is expressed as a symbol in the form of :S. If the actual system type is used in the form of S, its name will automatically be converted into a symbol.","category":"page"},{"location":"guide/configuration/#Multiple-Parameters","page":"Configuration","title":"Multiple Parameters","text":"","category":"section"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"When specifying multiple parameters in a system, we can pair the system to either a tuple of pairs or named tuples.","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"Tuple of Pairs","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"@config :S => (:a => 1, :b => 2)","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"Named Tuples","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"@config :S => (a = 1, b = 2)","category":"page"},{"location":"guide/configuration/#Multiple-Systems","page":"Configuration","title":"Multiple Systems","text":"","category":"section"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"We can create configurations for multiple systems by concatenating the configuration for each system into a tuple. For multiple parameters in multiple systems, you can use either a tuple of pairs or named tuples, as shown previously.","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"@system S1 begin\n    a ~ preserve\nend\n\n@system S2 begin\n    b ~ preserve\nend\n\n@config(:S1 => :a => 1, :S2 => :b => 2)","category":"page"},{"location":"guide/configuration/#Multiple-Configurations","page":"Configuration","title":"Multiple Configurations","text":"","category":"section"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"When multiple sets of configurations are needed, as in the configs argument for simulate(), a vector of Config objects is used. ","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"c = @config[:S => :a => 1, :S => :a => 2]","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"The @config macro also supports some convenient ways to construct a vector of configurations. ","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"The prefix operator ! allows expansion of any iterable placed in the configuration value. For example, !(:S => :a => 1:2) is expanded into two sets of separate configurations [:S => :a => 1, :S => :a => 2].","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"@config !(:S => :a => 1:2)","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"The infix operator * allows multiplication of a vector of configurations with another vector or a single configuration to construct multiple sets of configurations. For example, (:S => :a => 1:2) * (:S => :b => 0) is multiplied into [:S => (a = 1, b = 0), :S => (a = 2, b = 0)].","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"@config (:S => :a => 1:2) * (:S => :b => 0)","category":"page"},{"location":"guide/configuration/#Combining-Configurations","page":"Configuration","title":"Combining Configurations","text":"","category":"section"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"When you have multiple Config objects that you want to combine without making one from scratch, you can do that also using the @config macro. If there are variables with identical names, note that the value from the latter configuration will take precedence.","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"c1 = :S => (:a => 1, :b => 1)\nc2 = :S => (:b => 2)\n\nc3 = @config(c1, c2)","category":"page"},{"location":"guide/configuration/#Changing-the-Time-Step","page":"Configuration","title":"Changing the Time Step","text":"","category":"section"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"By default, a model simulation in Cropbox updates at an hourly interval. Based on your model, there may be times when you want to change the time step of the simulation. This can be done using a configuration. In order to change the time step value, all we need to do is assign a new value for step, which is simply a preserve variable with the parameter tag in the Clock system.","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"Example","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"Here we create a simple system with an advance variable that simply starts at 0 and increases by 1 every time step (the variable is irrelevant).","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"@system S(Controller) begin\n    a ~ advance\nend\n\nsimulate(S; stop=2u\"hr\")","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"\n We can configure the step variable within the Clock system to 1u\"d\", then insert the configuration object into the simulate() function, changing the simulation to a daily interval.","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"c = @config(:Clock => :step => 1u\"d\")\n\nsimulate(S; config=c, stop=2u\"d\")","category":"page"},{"location":"guide/configuration/#Supplying-a-DataFrame-to-a-provide-Variable","page":"Configuration","title":"Supplying a DataFrame to a provide Variable","text":"","category":"section"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"Apart from changing numerical parameter values, configurations are also commonly used to provide a new DataFrame to a provide variable that stores data for simulation. The syntax of the configuration remains identical, but instead of a numerical value, we provide a DataFrame. This allows us to easily run multiple simulations of a model using different datasets.","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"Example","category":"page"},{"location":"guide/configuration/","page":"Configuration","title":"Configuration","text":"@system S(Controller) begin\n    D ~ provide(parameter)\nend\n\nc = @config(\n    :S => :D => DataFrame(index=(0:2)u\"hr\", value=0:10:20)\n)\n\ninstance(S; config=c)","category":"page"},{"location":"reference/visualization/#Visualization1","page":"Visualization","title":"Visualization","text":"","category":"section"},{"location":"reference/visualization/","page":"Visualization","title":"Visualization","text":"plot\nplot!\nvisualize\nvisualize!\nmanipulate","category":"page"},{"location":"reference/visualization/#Cropbox.plot","page":"Visualization","title":"Cropbox.plot","text":"plot(df::DataFrame, x, y; <keyword arguments>) -> Plot\nplot(X::Vector, Y::Vector; <keyword arguments>) -> Plot\nplot(df::DataFrame, x, y, z; <keyword arguments>) -> Plot\n\nPlot a graph from provided data source. The type of graph is selected based on arguments.\n\nSee also: plot!, visualize\n\n\n\n\n\nplot(v::Number; kind, <keyword arguments>) -> Plot\nplot(V::Vector; kind, <keyword arguments>) -> Plot\n\nPlot a graph of horizontal/vertical lines depending on kind, which can be either :hline or :vline. An initial plotting of hline requires xlim and vline requires ylim, respectively.\n\nSee also: plot!, visualize\n\n\n\n\n\n","category":"function"},{"location":"reference/visualization/#Cropbox.plot!","page":"Visualization","title":"Cropbox.plot!","text":"plot!(p, <arguments>; <keyword arguments>) -> Plot\n\nUpdate an existing Plot object p by appending a new graph made with plot.\n\nSee also: plot\n\nArguments\n\np::Union{Plot,Nothing}: plot object to be updated; nothing creates a new plot.\n\n\n\n\n\n","category":"function"},{"location":"reference/visualization/#Cropbox.visualize","page":"Visualization","title":"Cropbox.visualize","text":"visualize(<arguments>; <keyword arguments>) -> Plot\n\nMake a plot from an output collected by running necessary simulations. A convenient function to run both simulate and plot together.\n\nSee also: visualize!, simulate, plot, manipulate\n\nExamples\n\njulia> @system S(Controller) begin\n           a(a) => a ~ accumulate(init=1)\n       end;\n\njulia> visualize(S, :time, :a; stop=5, kind=:line)\n       ┌────────────────────────────────────────┐\n    32 │                                       :│\n       │                                      : │\n       │                                     :  │\n       │                                    :   │\n       │                                   :    │\n       │                                  :     │\n       │                                 :      │\n  a    │                                :       │\n       │                              .'        │\n       │                            .'          │\n       │                          .'            │\n       │                       ..'              │\n       │                   ..''                 │\n       │             ....''                     │\n     1 │.........''''                           │\n       └────────────────────────────────────────┘\n       0                                        5\n                      time (hr)\n\n\n\n\n\n","category":"function"},{"location":"reference/visualization/#Cropbox.visualize!","page":"Visualization","title":"Cropbox.visualize!","text":"visualize!(p, <arguments>; <keyword arguments>) -> Plot\n\nUpdate an existing Plot object p by appending a new graph made with visualize.\n\nSee also: visualize\n\nArguments\n\np::Union{Plot,Nothing}: plot object to be updated; nothing creates a new plot.\n\n\n\n\n\n","category":"function"},{"location":"reference/visualization/#Cropbox.manipulate","page":"Visualization","title":"Cropbox.manipulate","text":"manipulate(f::Function; parameters, config=())\n\nCreate an interactive plot updated by callback f. Only works in Jupyter Notebook.\n\nArguments\n\nf::Function: callback for generating a plot; interactively updated configuration c is provided.\nparameters: parameters adjustable with interactive widgets; value should be an iterable.\nconfig=(): a baseline configuration.\n\n\n\n\n\nmanipulate(args...; parameters, kwargs...)\n\nCreate an interactive plot by calling manipulate with visualize as a callback.\n\nSee also: visualize\n\nArguments\n\nargs: positional arguments for visualize.\nparameters: parameters for manipulate.\nkwargs: keyword arguments for visualize.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Index","title":"Index","text":"","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"using Cropbox\nusing CSV\nusing DataFrames\nusing DataFramesMeta\nusing Dates\nusing TimeZones\n\nweather = DataFrame(\n    \"year\" => Int.(2002*ones(139)),\n    \"doy\" => [135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273],\n    \"rad (W/m^2)\" => [295.8, 297.9, 224.2, 95.8, 314.9, 284.6, 275.0, 320.0, 318.5, 295.7, 226.1, 183.2, 203.4, 205.6, 209.8, 255.4, 274.0, 299.5, 294.5, 303.9, 268.1, 212.9, 192.4, 206.1, 242.1, 291.3, 282.2, 259.6, 236.1, 54.0, 50.0, 245.2, 237.5, 290.9, 257.1, 219.8, 248.3, 312.8, 297.8, 286.9, 282.4, 263.0, 222.4, 223.6, 183.7, 258.6, 261.1, 243.2, 257.3, 276.8, 275.9, 302.5, 299.9, 191.3, 240.2, 251.0, 146.8, 291.9, 311.6, 139.9, 86.3, 279.1, 294.8, 291.2, 172.0, 217.3, 225.9, 164.7, 232.5, 267.3, 124.2, 146.6, 77.5, 118.6, 243.5, 257.6, 256.6, 283.4, 284.3, 264.3, 187.6, 254.8, 210.9, 295.0, 256.9, 272.7, 275.0, 276.1, 259.7, 244.9, 248.2, 257.6, 226.2, 164.3, 195.4, 227.5, 241.6, 217.5, 209.3, 217.4, 168.0, 128.6, 229.4, 92.5, 129.3, 19.9, 65.7, 112.1, 126.7, 44.1, 146.1, 223.1, 226.6, 248.8, 244.8, 245.3, 204.7, 246.9, 232.0, 238.9, 240.7, 233.6, 106.7, 64.1, 147.8, 203.2, 192.0, 147.7, 157.4, 181.6, 161.8, 174.0, 215.9, 134.0, 32.0, 54.0, 205.7, 194.9, 143.1],\n    \"Tavg (°C)\" => [14.9, 18.0, 21.3, 12.5, 9.6, 10.1, 8.8, 11.6, 14.7, 20.1, 20.3, 20.2, 21.6, 21.4, 21.8, 21.7, 25.8, 25.9, 23.1, 20.2, 22.8, 25.8, 23.5, 18.4, 17.5, 20.9, 24.9, 26.9, 25.9, 20.7, 18.4, 19.9, 19.8, 20.4, 20.7, 20.8, 21.7, 21.7, 22.4, 23.8, 26.1, 27.8, 27.8, 26.8, 23.5, 24.1, 24.0, 25.8, 27.9, 29.2, 29.9, 28.2, 23.1, 20.8, 23.5, 28.1, 24.9, 20.9, 20.5, 22.0, 20.8, 24.2, 26.7, 25.8, 27.1, 27.0, 26.0, 25.5, 27.7, 28.4, 23.4, 22.9, 20.0, 23.5, 28.1, 29.0, 27.9, 28.0, 27.9, 28.8, 25.9, 27.1, 27.1, 23.6, 20.0, 20.3, 21.4, 22.5, 25.0, 26.8, 27.9, 28.6, 28.7, 28.0, 28.2, 29.3, 28.2, 27.5, 25.4, 26.7, 27.1, 26.0, 25.4, 22.2, 23.9, 19.2, 17.7, 18.4, 19.9, 17.5, 19.3, 22.4, 24.9, 22.2, 20.3, 19.6, 19.8, 21.0, 23.8, 22.5, 17.5, 18.4, 21.3, 23.2, 23.4, 20.9, 20.5, 21.2, 22.8, 24.2, 23.7, 19.3, 16.3, 17.8, 17.5, 21.1, 20.2, 16.4, 17.9],\n    \"Tmax (°C)\" => [22.1, 27.7, 27.3, 17.7, 15.6, 15.6, 14.5, 20.1, 24.0, 29.5, 24.6, 27.8, 27.7, 28.0, 27.7, 29.0, 32.3, 31.9, 29.1, 26.1, 28.7, 32.8, 32.4, 22.4, 24.3, 30.1, 32.7, 34.3, 32.8, 26.0, 20.6, 25.4, 26.8, 27.4, 28.8, 27.0, 28.4, 29.3, 30.0, 31.7, 34.2, 35.3, 34.9, 33.4, 29.0, 30.9, 31.5, 33.2, 35.3, 36.0, 36.4, 32.0, 29.6, 27.5, 32.7, 35.0, 29.0, 26.1, 29.7, 27.8, 24.4, 31.5, 32.7, 34.0, 32.7, 32.1, 32.2, 31.3, 34.6, 35.1, 28.6, 27.0, 21.6, 28.9, 35.0, 35.0, 33.1, 34.2, 35.6, 37.3, 35.9, 34.6, 35.0, 27.1, 26.3, 28.2, 29.6, 31.9, 34.5, 35.7, 36.9, 36.2, 34.8, 33.0, 33.8, 35.2, 34.7, 32.8, 31.1, 34.0, 31.4, 30.9, 31.1, 28.3, 29.7, 22.5, 21.1, 21.7, 25.2, 19.0, 24.0, 30.7, 31.7, 28.2, 26.8, 28.0, 29.6, 32.4, 32.8, 26.2, 25.4, 28.2, 27.3, 25.3, 29.8, 28.4, 28.4, 27.4, 29.2, 30.4, 29.7, 24.1, 25.5, 24.3, 19.3, 28.2, 25.4, 24.3, 24.0],\n    \"Tmin (°C)\" => [8.6, 4.9, 14.3, 8.0, 4.0, 4.3, 2.6, 1.4, 3.0, 7.1, 16.1, 15.5, 17.2, 15.9, 15.3, 13.8, 17.9, 17.9, 15.4, 11.4, 16.8, 19.0, 17.8, 12.6, 11.3, 11.2, 16.1, 18.8, 18.4, 17.7, 16.7, 14.5, 12.0, 12.1, 12.5, 15.4, 15.2, 14.1, 13.9, 14.7, 17.9, 19.6, 22.3, 22.0, 19.9, 17.6, 15.9, 18.0, 19.7, 22.4, 22.3, 22.1, 15.3, 13.2, 13.3, 19.8, 21.4, 13.5, 10.4, 15.6, 18.1, 16.6, 19.7, 16.8, 21.1, 21.8, 21.1, 19.9, 19.3, 22.2, 20.2, 20.8, 16.9, 19.9, 21.9, 22.1, 21.9, 22.2, 19.8, 19.9, 21.1, 19.5, 21.1, 17.4, 13.1, 12.2, 12.9, 12.6, 15.6, 17.9, 19.7, 22.2, 21.9, 24.0, 22.4, 23.4, 21.5, 22.3, 18.7, 18.9, 23.3, 22.4, 20.4, 17.4, 17.4, 15.6, 15.3, 14.6, 15.2, 15.6, 14.6, 14.0, 18.2, 16.6, 15.0, 12.2, 13.3, 11.4, 15.3, 16.6, 9.0, 8.4, 14.3, 21.9, 18.2, 15.2, 14.1, 15.8, 16.5, 17.1, 18.6, 10.1, 7.8, 10.5, 15.7, 15.2, 13.2, 10.4, 12.2],\n    \"rainfall (mm)\" => [0, 0, 3, 11, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 1, 6, 0, 0, 0, 0, 0, 0, 9, 3, 4, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 12, 1, 0, 0, 0, 0, 0, 0, 10, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 42, 3, 0, 1, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 26, 6, 0, 0, 0],\n    \"date (:Date)\" => Date(\"2002-05-15\"):Day(1):Date(\"2002-09-30\"),\n    \"GDD (K)\" => [6.9, 10.0, 13.3, 4.5, 1.6, 2.1, 0.8, 3.6, 6.7, 12.1, 12.3, 12.2, 13.6, 13.4, 13.8, 13.7, 17.8, 17.9, 15.1, 12.2, 14.8, 17.8, 15.5, 10.4, 9.5, 12.9, 16.9, 18.9, 17.9, 12.7, 10.4, 11.9, 11.8, 12.4, 12.7, 12.8, 13.7, 13.7, 14.4, 15.8, 18.1, 19.8, 19.8, 18.8, 15.5, 16.1, 16.0, 17.8, 19.9, 21.2, 21.9, 20.2, 15.1, 12.8, 15.5, 20.1, 16.9, 12.9, 12.5, 14.0, 12.8, 16.2, 18.7, 17.8, 19.1, 19.0, 18.0, 17.5, 19.7, 20.4, 15.4, 14.9, 12.0, 15.5, 20.1, 21.0, 19.9, 20.0, 19.9, 20.8, 17.9, 19.1, 19.1, 15.6, 12.0, 12.3, 13.4, 14.5, 17.0, 18.8, 19.9, 20.6, 20.7, 20.0, 20.2, 21.3, 20.2, 19.5, 17.4, 18.7, 19.1, 18.0, 17.4, 14.2, 15.9, 11.2, 9.7, 10.4, 11.9, 9.5, 11.3, 14.4, 16.9, 14.2, 12.3, 11.6, 11.8, 13.0, 15.8, 14.5, 9.5, 10.4, 13.3, 15.2, 15.4, 12.9, 12.5, 13.2, 14.8, 16.2, 15.7, 11.3, 8.3, 9.8, 9.5, 13.1, 12.2, 8.4, 9.9],\n    \"cGDD (K)\" => [6.9, 10.0, 13.3, 4.5, 1.6, 2.1, 0.8, 3.6, 6.7, 12.1, 12.3, 12.2, 13.6, 13.4, 13.8, 13.7, 17.8, 17.9, 15.1, 12.2, 14.8, 17.8, 15.5, 10.4, 9.5, 12.9, 16.9, 18.9, 17.9, 12.7, 10.4, 11.9, 11.8, 12.4, 12.7, 12.8, 13.7, 13.7, 14.4, 15.8, 18.1, 19.8, 19.8, 18.8, 15.5, 16.1, 16.0, 17.8, 19.9, 21.2, 21.9, 20.2, 15.1, 12.8, 15.5, 20.1, 16.9, 12.9, 12.5, 14.0, 12.8, 16.2, 18.7, 17.8, 19.1, 19.0, 18.0, 17.5, 19.7, 20.4, 15.4, 14.9, 12.0, 15.5, 20.1, 21.0, 19.9, 20.0, 19.9, 20.8, 17.9, 19.1, 19.1, 15.6, 12.0, 12.3, 13.4, 14.5, 17.0, 18.8, 19.9, 20.6, 20.7, 20.0, 20.2, 21.3, 20.2, 19.5, 17.4, 18.7, 19.1, 18.0, 17.4, 14.2, 15.9, 11.2, 9.7, 10.4, 11.9, 9.5, 11.3, 14.4, 16.9, 14.2, 12.3, 11.6, 11.8, 13.0, 15.8, 14.5, 9.5, 10.4, 13.3, 15.2, 15.4, 12.9, 12.5, 13.2, 14.8, 16.2, 15.7, 11.3, 8.3, 9.8, 9.5, 13.1, 12.2, 8.4, 9.9]\n)\n\npelts = DataFrame(\n    \"Year (yr)\" => [1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935],\n    \"Hare\" => [19.58, 19.6, 19.61, 11.99, 28.04, 58.0, 74.6, 75.09, 88.48, 61.28, 74.67, 88.06, 68.51, 32.19, 12.64, 21.49, 30.35, 2.18, 152.65, 148.36, 85.81, 41.41, 14.75, 2.28, 5.91, 9.95, 10.44, 70.64, 50.12, 50.13, 101.25, 97.12, 86.51, 72.17, 38.32, 10.11, 7.74, 9.67, 43.12, 52.21, 134.85, 134.86, 103.79, 46.1, 15.03, 24.2, 41.65, 52.34, 53.78, 70.4, 85.81, 56.69, 16.59, 6.16, 2.3, 12.82, 4.72, 4.73, 37.22, 69.72, 57.78, 28.68, 23.37, 21.54, 26.34, 53.1, 68.48, 75.58, 57.92, 40.97, 24.95, 12.59, 4.97, 4.5, 11.21, 56.6, 69.63, 77.74, 80.53, 73.38, 36.93, 4.64, 2.54, 1.8, 2.39, 4.23, 19.52, 82.11, 89.76, 81.66, 15.76],\n    \"Lynx\" => [30.09, 45.15, 49.15, 39.52, 21.23, 8.42, 5.56, 5.08, 10.17, 19.6, 32.91, 34.38, 29.59, 21.3, 13.69, 7.65, 4.08, 4.09, 14.33, 38.22, 60.78, 70.77, 72.77, 42.68, 16.39, 9.83, 5.8, 5.26, 18.91, 30.95, 31.18, 46.34, 45.77, 44.15, 36.33, 12.03, 12.6, 18.34, 35.14, 43.77, 65.69, 79.35, 51.65, 32.59, 22.45, 16.16, 14.12, 20.38, 33.33, 46.0, 51.41, 46.43, 33.68, 18.01, 8.86, 7.13, 9.47, 14.86, 31.47, 60.57, 63.51, 54.7, 6.3, 3.41, 5.44, 11.65, 20.35, 32.88, 39.55, 43.36, 40.83, 30.36, 17.18, 6.82, 3.19, 3.52, 9.94, 20.3, 31.99, 42.36, 49.08, 53.99, 52.25, 37.7, 19.14, 6.98, 8.31, 16.01, 24.82, 29.7, 35.4]\n)","category":"page"},{"location":"tutorials/makingamodel/#Making-a-Model","page":"Making a model","title":"Making a Model","text":"","category":"section"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"This tutorial will cover the topic of creating a Cropbox model.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Pages = [\"makingamodel.md\"]\nDepth = 4","category":"page"},{"location":"tutorials/makingamodel/#GDD","page":"Making a model","title":"Growing Degree-Day","text":"","category":"section"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"You might have heard the terms like growing degree days (GDD), thermal units, heat units, heat sums, temperature sums, and thermal-time that are used to relate the rate of plant or insect development to temperature. They are all synonymous. The concept of thermal-time or thermal-units derives from the long-standing observation and assumption that timing of development is primarily driven by temperature in plants and the relationship is largely linear. The linear relationship is generally held true over normal growing temperatures that are bracketed by the base temperature (Tb) and optimal temperature (Topt). Many existing crop models and tree growth models use thermal-unit approaches (e.g., GDD) for modeling phenology with some modifications to account for other factors like photoperiod, vernalization, dormancy, and stress. The growing degree days (GDD) is defined as the difference between the average daily air temperature (T) and the base temperature below which the developmental process stops. The bigger the difference in a day, the faster the development takes place up to a certain optimal temperature (Topt). The Cumulative GDD (cGDD) since the growth initiation (e.g., sowing, imbibition for germination) is then calculated by:","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"beginalign\nmathrmGDD(T) = max  0 min  T T_opt  - T_b  \nmathrmcGDD = sum_i^n mathrmGDD(T_i) \nendalign","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"In this section, we will create a model that simulates GDD and cGDD.","category":"page"},{"location":"tutorials/makingamodel/#System","page":"Making a model","title":"System","text":"","category":"section"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Let us start by making a system called GrowingDegreeDay. This can be done using a simple Cropbox macro @system. ","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system GrowingDegreeDay","category":"page"},{"location":"tutorials/makingamodel/#Variables","page":"Making a model","title":"Variables","text":"","category":"section"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"From the equation, let's identify the variables we need to declare in our system. In the equation for GDD, we have two parameters Topt and Tb. Since they are fixed values, we will declare them as preserve variables, which are variables that remain constant throughout a simulation.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system GrowingDegreeDay begin\n    Tb ~ preserve\n    To ~ preserve\nend","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Tb and To are parameters that we may want to change depending on the simulation. To make this possible, we will assign them the parameter tag, which allows the tagged variables to be altered through a configuration for each simulation. Note that we will not assign values at declaration because we will configure them when we run the simulation.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system GrowingDegreeDay begin\n    Tb ~ preserve(parameter)\n    To ~ preserve(parameter)\nend","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Lastly, we will tag the variables with units. Tagging units is the recommended practice for many reasons, one of which is to catch mismatching units during calculations.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system GrowingDegreeDay begin\n    Tb ~ preserve(parameter, u\"°C\")\n    To ~ preserve(parameter, u\"°C\")\nend","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"In the GDD equation, T represents the average daily temperature value necessary to calculate the GDD. Likewise, the variable in our system will represent a series of daily average temperatures. The series of temperature values will be driven from an external data source, for which we will create a separate system later on for data extraction. For the GrowingDegreeDay system, we will declare T as a hold variable, which represents a placeholder that will be replaced by a T from another system. ","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system GrowingDegreeDay begin\n    T ~ hold\n    Tb ~ preserve(parameter, u\"°C\")\n    To ~ preserve(parameter, u\"°C\")\nend","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"We declared all the necessary variables required to calculate GDD. Now it is time to declare GDD as a variable in the system. Because GDD is a variable that we want to evaluate and store in each update, we will declare it as a track variable with T, Tb, and To as its depending variables.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system GrowingDegreeDay begin\n    T ~ hold\n    Tb ~ preserve(parameter, u\"°C\")\n    To ~ preserve(parameter, u\"°C\")\n\n    GDD(T, Tb, To) => begin\n        min(T, To) - Tb\n    end ~ track(min = 0, u\"K\")\nend","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Note that we have tagged the unit for GDD as u\"K\". This is to avoid incompatibilities that u\"°C\" has with certain operations.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Now that GDD is declared in the system, we will declare cGDD as an accumulate variable with GDD as its depending variable. Recall that accumulate variables perform the Euler method of integration.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system GrowingDegreeDay begin\n    T ~ hold\n    Tb ~ preserve(parameter, u\"°C\")\n    To ~ preserve(parameter, u\"°C\")\n\n    GDD(T, Tb, To) => begin\n        min(T, To) - Tb\n    end ~ track(min = 0, u\"K\")\n\n    cGDD(GDD) ~ accumulate(u\"K*d\")\nend","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"We have declared all the necessary variables for GrowingDegreeDay.","category":"page"},{"location":"tutorials/makingamodel/#Mixins","page":"Making a model","title":"Mixins","text":"","category":"section"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Now let's address the issue of the missing temperature values. We will make a new system that will provide the missing temperature data we need for simulating GrowingDegreeDay. We will call this system Temperature. The purpose of Temperature will be to obtain a time series of daily average temperature values from an external data source.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system Temperature","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"For this tutorial, we will be using weather data from Beltsville, Maryland in 2002. The data is available here.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"If you are unsure how to read CSV files, check the following documentation. You can also follow the template below (make sure path corresponds to the path to your data file).","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"using CSV, DataFrames\n\nweather = CSV.read(path, DataFrame)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"The data should look something like the following:","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"first(weather, 3)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n Notice that the column names have units in parentheses. The unitfy() function in Cropbox automatically assigns units to values based on names of the columns (if the unit is specified).","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"weather = unitfy(weather)\nfirst(weather, 3)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n In the Temperature system, there is one variable that we will declare before declaring any other variable. We will name this variable calendar.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system Temperature begin\n    calendar(context) ~ ::Calendar\nend","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"The purpose of calendar is to have access to variables inside the Calendar system such as init, last, and date, which represent initial, last, and current date, respectively.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"note: Note\ncalendar is a variable reference to the Calendar system (one of the built-in systems of Cropbox), which has a number of time-related variables in date format. Declaring calendar as a variable of type Calendar allows us to use the variables inside the Calendar system as variables for our current system. Recall that context is a reference to the Context system and is included in every Cropbox system by default. Inside the Context system there is the config variable which references a Config object. By having context as a depending variable for calendar, we can change the values of the variables in calendar with a configuration. ","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"The next variable we will add is a variable storing the weather data as a DataFrame. This variable will be a provide variable named data.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system Temperature begin\n    calendar(context) ~ ::Calendar\n    data ~ provide(parameter, index=:date, init=calendar.date)\nend","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Note that we have tagged the variable with a parameter tag so that we can assign a DataFrame during the configuration. We will set the index of the extracted DataFrame as the \"date\" column of the data source. The init tag is used to specify the starting row of the data that we want to store. calendar.date refers to the date variable in the Calendar system, and is a track variable that keeps track of the dates of simulation. The initial value of date is dependent on calendar.init which we will assign during configuration. By setting init to calendar.date, we are making sure that the provide variable extracts data from the correct starting row corresponding to the desired initial date of simulation.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Now we can finally declare the temperature variable using one of the columns of the DataFrame represented by data. Because this variable is driven from a source, we will be declaring a drive variable named T. The from tag specifies the DataFrame source and the by tag specifies which column to take the values from.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system Temperature begin\n    calendar(context) ~ ::Calendar\n    data ~ provide(parameter, index=:date, init=calendar.date)\n    T ~ drive(from=data, by=:Tavg, u\"°C\")\nend","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n We finally have all the components to define our model. Because GrowingDegreeDay requires values for T from Temperature, let's redeclare GrowingDegreeDay with Temperature as a mixin. Because we want to run a simulation of GrowingDegreeDay, we also want to include Controller as a mixin. Recall that Controller must be included as a mixin for any system that you want to simulate.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system GrowingDegreeDay(Temperature, Controller) begin\n    T ~ hold\n    Tb ~ preserve(parameter, u\"°C\")\n    To ~ preserve(parameter, u\"°C\")\n\n    GDD(T, Tb, To) => begin\n        min(T, To) - Tb\n    end ~ track(min = 0, u\"K\")\n\n    cGDD(GDD) ~ accumulate(u\"K*d\")\nend","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n","category":"page"},{"location":"tutorials/makingamodel/#Configuration","page":"Making a model","title":"Configuration","text":"","category":"section"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"The next step is to create a configuration object to assign the values of parameters. Recall that data, T, Tb, and To are empty variables at the moment.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"As covered in the Configuration section, we can make a single Config object with all the configurations we need for our systems.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Given the nature of GDD, this model is a daily model. To run a daily simulation, we need to configure the step variable in the Clock system from 1u\"hr\" to 1u\"d\". This will change the time interval of the simulation from hourly (default) to daily.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"c = @config :Clock => :step => 1u\"d\"","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Next we will add the configurations for GrowingDegreeDay. The only parameters we have to configure are Tb and To.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"c = @config (\n    :Clock => (\n        :step => 1u\"d\"\n    ),\n    :GrowingDegreeDay => (\n        :Tb => 8.0u\"°C\",\n        :To => 32.0u\"°C\"\n    )\n)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Next we will pair the aforementioned DataFrame weather to data in Temperature","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"c = @config(\n    :Clock => (\n        :step => 1u\"d\"\n    ),\n    :GrowingDegreeDay => (\n        :Tb => 8.0u\"°C\",\n        :To => 32.0u\"°C\"\n    ),\n    :Temperature => (\n        :data => weather\n    )\n)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Lastly, we will configure the init and last parameters of the Calendar system, which will define the time range of our simulation.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"c = @config(\n    :Clock => (\n        :step => 1u\"d\"\n    ),\n    :GrowingDegreeDay  => (\n        :Tb => 8.0u\"°C\",\n        :To => 32.0u\"°C\"\n    ),\n    :Temperature => (\n        :data => weather\n    ),\n    :Calendar => (\n        :init => ZonedDateTime(2002, 5, 15, tz\"America/New_York\"),\n        :last => ZonedDateTime(2002, 9, 30, tz\"America/New_York\")\n    )\n)","category":"page"},{"location":"tutorials/makingamodel/#Simulation","page":"Making a model","title":"Simulation","text":"","category":"section"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Now that we have fully defined GrowingDegreeDay and created a configuration for it, we can finally simulate the model.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"s = simulate(GrowingDegreeDay;\n    config = c,\n    stop = \"calendar.stop\",\n    index = \"calendar.date\",\n    target = [:GDD, :cGDD]\n)\n\nfirst(s, 10)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n","category":"page"},{"location":"tutorials/makingamodel/#Visualization","page":"Making a model","title":"Visualization","text":"","category":"section"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"To end the tutorial, let's visualize the simulation using the plot() and visualize() functions.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"We can input the DataFrame from our simulation in the plot() function to create a plot.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Here is a plot of GDD over time.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"plot(s, \"calendar.date\", :GDD; kind=:line)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"We can also simultaneously run a new simulation and plot its result using the visualize() function.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Here is a plot of cGDD over time.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"visualize(GrowingDegreeDay, \"calendar.date\", :cGDD; config=c, stop=\"calendar.stop\", kind=:line)","category":"page"},{"location":"tutorials/makingamodel/#Lotka-Volterra-Equations","page":"Making a model","title":"Lotka-Volterra Equations","text":"","category":"section"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"In this tutorial, we will create a model that simulates population dynamics between prey and predator using the Lotka-Volterra equations. The Lotka-Volterra equations are as follows:","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"beginalign\nfracdNdt = bN - aNP \nfracdPdt = caNP - mP \nendalign","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n Here is a list of variables used in the system:","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Symbol Value Units Description\nt - mathrmyr Time unit used in the model\nN - - Prey population as number of individuals (state variable)\nP - - Predator population as number of individuals (state variable)\nb - mathrmyr^-1 Per capital birth rate that defines the intrinsic growth rate of prey population\na - mathrmyr^-1 Attack rate or predation rate\nc - - Conversion efficiency of an eaten prey into new predator; predator's reproduction efficiency per prey consumed)\nm - mathrmyr^-1 Mortality rate of predator population","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n","category":"page"},{"location":"tutorials/makingamodel/#System-2","page":"Making a model","title":"System","text":"","category":"section"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Let's begin by creating a system called LotkaVolterra. Since this is a system that we want to simulate later on, we must include Controller as a mixin.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system LotkaVolterra(Controller)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n We will first declare a time variable with a yearly unit, which we will use for plotting the model simulations later on. Recall that context.clock.time is a variable that keeps track of the progression of time. We are simply declaring a variable to keep track of the time in years.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system LotkaVolterra(Controller) begin\n    t(context.clock.time) ~ track(u\"yr\")\nend","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n Next, we will declare the parameters in the equations as preserve variables. preserve variables are variables that remain constant throughout a simulation.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system LotkaVolterra(Controller) begin\n    t(context.clock.time) ~ track(u\"yr\")\n\n    b: prey_birth_rate            ~ preserve(parameter, u\"yr^-1\")\n    a: predation_rate             ~ preserve(parameter, u\"yr^-1\")\n    c: predator_reproduction_rate ~ preserve(parameter)\n    m: predator_mortality_rate    ~ preserve(parameter, u\"yr^-1\")\nend","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n Now let's declare the prey and predator populations as variables. The Lotka-Volterra equations describe the rates of change for the two populations. As we want to track the actual number of the two populations, we will declare the two populations as accumulate variables, which are simply Euler integrations of the two population rates. Note that a variable can be used as its own depending variable.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system LotkaVolterra(Controller) begin\n    t(context.clock.time) ~ track(u\"yr\")\n\n    b: prey_birth_rate            ~ preserve(parameter, u\"yr^-1\")\n    a: predation_rate             ~ preserve(parameter, u\"yr^-1\")\n    c: predator_reproduction_rate ~ preserve(parameter)\n    m: predator_mortality_rate    ~ preserve(parameter, u\"yr^-1\")\n\n    N(N, P, b, a):    prey_population     =>     b*N - a*N*P ~ accumulate\n    P(N, P, c, a, m): predator_population => c*a*N*P -   m*P ~ accumulate\nend","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n By default, accumulate variables initialize at a value of zero. In our current model, that would result in two populations remaining at zero indefinitely. To address this, we will define the initial values for the two accumulate variables using the init tag. We can specify a particular value, or we can also create and reference new parameters representing the two initial populations. We will go with the latter option as it allows us to flexibly change the initial populations with a configuration.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system LotkaVolterra(Controller) begin\n    t(context.clock.time) ~ track(u\"yr\")\n\n    b: prey_birth_rate            ~ preserve(parameter, u\"yr^-1\")\n    a: predation_rate             ~ preserve(parameter, u\"yr^-1\")\n    c: predator_reproduction_rate ~ preserve(parameter)\n    m: predator_mortality_rate    ~ preserve(parameter, u\"yr^-1\")\n\n    N0: prey_initial_population     ~ preserve(parameter)\n    P0: predator_initial_population ~ preserve(parameter)\n\n    N(N, P, b, a):    prey_population     =>     b*N - a*N*P ~ accumulate(init=N0)\n    P(N, P, c, a, m): predator_population => c*a*N*P -   m*P ~ accumulate(init=P0)\nend","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n","category":"page"},{"location":"tutorials/makingamodel/#Configuration-2","page":"Making a model","title":"Configuration","text":"","category":"section"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"With the system now defined, we will create a Config object to fill or adjust the parameters.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"First, we will change the step variable in the Clock system to 1u\"d\", which will make the system update at a daily interval. Recall that Clock is a system that is referenced in all systems by default. You can technically run the model with any timestep.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"lvc = @config (:Clock => :step => 1u\"d\")","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n Next, we will configure the parameters in the LotkaVolterra system that we defined. Note that we can easily combine configurations by providing multiple elements.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"lvc = @config (lvc,\n    :LotkaVolterra => (\n        b = 0.6,\n        a = 0.02,\n        c = 0.5,\n        m = 0.5,\n        N0 = 20,\n        P0 = 30\n    )\n)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n","category":"page"},{"location":"tutorials/makingamodel/#Visualization-2","page":"Making a model","title":"Visualization","text":"","category":"section"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Let's visualize the LotkaVolterra system with the configuration that we just created, using the visualize() function. The visualize() function both runs a simulation and plots the resulting DataFrame.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"visualize(LotkaVolterra, :t, [:N, :P]; config = lvc, stop = 100u\"yr\", kind = :line)","category":"page"},{"location":"tutorials/makingamodel/#Density-Dependent-Lotka-Volterra-Equations","page":"Making a model","title":"Density-Dependent Lotka-Volterra Equations","text":"","category":"section"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Now let's try to make a density-dependent version of the original Lotka-Volterra model which incorporates a new term in the prey population rate. The new variable K represents the carrying capacity of the prey population.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"beginalign\nfracdNdt = bN-fracbKN^2-aNP \nfracdPdt = caNP-mP \nendalign","category":"page"},{"location":"tutorials/makingamodel/#System-3","page":"Making a model","title":"System","text":"","category":"section"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"We will call this new system LotkaVolterraDD.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system LotkaVolterraDD(Controller)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n Since we already defined the LotkaVolterra system, which already has most of the variables we require, we can use LotkaVolterra as a mixin for LotkaVolterraDD. This makes our task a lot simpler, as all that remains is to declare the variable K for carrying capacity and redeclare the variable N for prey population. The variable N in the new system will automatically overwrite the N from LotkaVolterra. ","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system LotkaVolterraDD(LotkaVolterra, Controller) begin\n    N(N, P, K, b, a): prey_population => begin\n        b*N - b/K*N^2 - a*N*P\n    end ~ accumulate(init = N0)\n    \n    K: carrying_capacity ~ preserve(parameter)\nend","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n","category":"page"},{"location":"tutorials/makingamodel/#Configuration-3","page":"Making a model","title":"Configuration","text":"","category":"section"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Much like the new system, the new configuration can be created by reusing the old configuration. All we need to configure is the new variable K.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"lvddc = @config(lvc, (:LotkaVolterraDD => :K => 1000))","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n","category":"page"},{"location":"tutorials/makingamodel/#Visualization-3","page":"Making a model","title":"Visualization","text":"","category":"section"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Once again, let's visualize the system using the visualize() function.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"visualize(LotkaVolterraDD, :t, [:N, :P]; config = lvddc, stop = 100u\"yr\", kind = :line)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n","category":"page"},{"location":"tutorials/makingamodel/#Calibration","page":"Making a model","title":"Calibration","text":"","category":"section"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"If you want to calibrate the parameters according to a particular dataset, Cropbox provides the calibrate() function, which relies on BlackBoxOptim.jl for global optimization methods. If you are interested in local optimization methods, refer to Optim.jl package for more information.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"For this tutorial, we will use a dataset containing the number of pelts (in thousands) of Canadian lynx and snowshoe hare traded by the Hudson Bay Trading Company in Canada from 1845 to 1935. The data is available here.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"If you are unsure how to read CSV files, check the following documentation. You can also follow the template below (make sure path corresponds to the path to your data file).","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"using CSV, DataFrames\n\npelts = CSV.read(path, DataFrame)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"The data should look something like the this:","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"first(pelts, 3)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n Recall that we can use the unitfy() function in Cropbox to automatically assign units when they are specified in the column headers.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"pelts = unitfy(pelts)\nfirst(pelts, 3)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n Let's plot the data and see what it looks like.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"visualize(pelts, :Year, [:Hare, :Lynx], kind = :scatterline)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n For our calibration, we will use a subset of the data covering years 1900 to 1920.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"pelts_subset = @subset(pelts, 1900u\"yr\" .<= :Year .<= 1920u\"yr\")","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n Before we calibrate the parameters for LotkaVolterra, let's add one new variable to the system. We will name this variable y for year. The purpose of y is to keep track of the year in the same manner as the dataset.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system LotkaVolterra(Controller) begin\n    t(context.clock.time) ~ track(u\"yr\")\n    y(t): year            ~ track::Int(u\"yr\", round)\n\n    b: prey_birth_rate            ~ preserve(parameter, u\"yr^-1\")\n    a: predation_rate             ~ preserve(parameter, u\"yr^-1\")\n    c: predator_reproduction_rate ~ preserve(parameter)\n    m: predator_mortality_rate    ~ preserve(parameter, u\"yr^-1\")\n\n    N0: prey_initial_population     ~ preserve(parameter)\n    P0: predator_initial_population ~ preserve(parameter)\n\n    N(N, P, b, a):    prey_population     =>     b*N - a*N*P ~ accumulate(init=N0)\n    P(N, P, c, a, m): predator_population => c*a*N*P -   m*P ~ accumulate(init=P0)\nend","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n We will now use the calibrate() function to find parameters that fit the data. Keep in mind that the search range for each parameter will be determined by you. We will use the snap option to explicitly indicate that the output should be recorded by 365-day intervals to avoid excessive rows in the DataFrame causing unnecessary slowdown. Note that we will use 365u\"d\" instead of 1u\"yr\" which is technically equivalent to 365.25u\"d\" following the convention in astronomy. For information regarding syntax, please check the reference.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"lvcc = calibrate(LotkaVolterra, pelts_subset;\n    index = :Year => :y,\n    target = [:Hare => :N, :Lynx => :P],\n    config = :Clock => (:init => 1900u\"yr\", :step => 1u\"d\"),\n    parameters = LotkaVolterra => (;\n        b = (0, 2),\n        a = (0, 2),\n        c = (0, 2),\n        m = (0, 2),\n        N0 = (0, 100),\n        P0 = (0, 100),\n    ),\n    stop = 20u\"yr\",\n    snap = 365u\"d\"\n)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n As you can see above, the calibrate() function will return a Config object for the system.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Using the new configuration, let's make a comparison plot to visualize how well the simualation with the new parameters fits the data.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"p1 = visualize(pelts_subset, :Year, [:Hare, :Lynx]; kind = :scatterline)\nvisualize!(p1, LotkaVolterra, :t, [:N, :P];\n    config = (lvcc, :Clock => (:init => 1900u\"yr\", :step => 1u\"d\")),\n    stop = 20u\"yr\",\n    kind = :line,\n    colors = [1, 2],\n    names = [],\n)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n Now let's try calibrating the density-dependent version of the model. Since we made a slight change to LotkaVolterra, let's make sure to define LotkaVolterraDD again.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system LotkaVolterraDD(LotkaVolterra, Controller) begin\n    N(N, P, K, b, a): prey_population => begin\n        b*N - b/K*N^2 - a*N*P\n    end ~ accumulate(init = N0)\n    \n    K: carrying_capacity ~ preserve(parameter)\nend","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"@system LotkaVolterraDD(Controller) begin\n    t(context.clock.time) ~ track(u\"yr\")\n    y(t): year            ~ track::Int(u\"yr\", round)\n\n    b: prey_birth_rate            ~ preserve(parameter, u\"yr^-1\")\n    a: predation_rate             ~ preserve(parameter, u\"yr^-1\")\n    c: predator_reproduction_rate ~ preserve(parameter)\n    m: predator_mortality_rate    ~ preserve(parameter, u\"yr^-1\")\n    K: carrying_capacity          ~ preserve(parameter)\n\n    N0: prey_initial_population     ~ preserve(parameter)\n    P0: predator_initial_population ~ preserve(parameter)\n\n    N(N, P, b, a, K): prey_population     => b*N - b/K*N^2 - a*N*P ~ accumulate(init=N0)\n    P(N, P, c, a, m): predator_population =>       c*a*N*P -   m*P ~ accumulate(init=P0)\nend","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n Don't forget to add K among the parameters that we want to calibrate.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"lvddcc = calibrate(LotkaVolterraDD, pelts_subset;\n    index = :Year => :y,\n    target = [:Hare => :N, :Lynx => :P],\n    config = :Clock => (:init => 1900u\"yr\", :step => 1u\"d\"),\n    parameters = LotkaVolterraDD => (;\n        b = (0, 2),\n        a = (0, 2),\n        c = (0, 2),\n        m = (0, 2),\n        N0 = (0, 100),\n        P0 = (0, 100),\n        K = (0, 1000)\n    ),\n    stop = 20u\"yr\",\n    snap = 365u\"d\"\n)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n Once again, let us make a comparison plot to see how the density-dependent version of the model fares against the original dataset.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"p2 = visualize(pelts_subset, :Year, [:Hare, :Lynx]; kind = :scatterline)\nvisualize!(p2, LotkaVolterraDD, :t, [:N, :P];\n    config = (lvddcc, :Clock => (:init => 1900u\"yr\", :step => 1u\"d\")),\n    stop = 20u\"yr\",\n    kind = :line,\n    colors = [1, 2],\n    names = [],\n)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n","category":"page"},{"location":"tutorials/makingamodel/#Evaluation","page":"Making a model","title":"Evaluation","text":"","category":"section"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"We have visualized how the simulated LotkaVolterra and LotkaVolterraDD systems compare to the the original dataset. Let us obtain a metric for how well the simulations fit the original dataset using the evaluate() function in Cropbox. The evaluate() function supports numerous different metrics for evaluation. Here, we will calculate the root-mean-square error (RMSE) and modeling efficiency (EF).","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"Here are the evaluation metrics for LotkaVolterra. The numbers in the tuples correspond to hare and lynx, respectively.","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"evaluate(LotkaVolterra, pelts_subset;\n    index = :Year => :y,\n    target = [:Hare => :N, :Lynx => :P],\n    config = (lvcc, :Clock => (:init => 1900u\"yr\", :step => 1u\"d\")),\n    stop = 20u\"yr\",\n    snap = 365u\"d\",\n    metric = :rmse,\n)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"evaluate(LotkaVolterra, pelts_subset;\n    index = :Year => :y,\n    target = [:Hare => :N, :Lynx => :P],\n    config = (lvcc, :Clock => (:init => 1900u\"yr\", :step => 1u\"d\")),\n    stop = 20u\"yr\",\n    snap = 365u\"d\",\n    metric = :ef\n)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"\n Here are the evaluation metrics for LotkaVolterraDD:","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"evaluate(LotkaVolterraDD, pelts_subset;\n    index = :Year => :y,\n    target = [:Hare => :N, :Lynx => :P],\n    config = (lvddcc, :Clock => (:init => 1900u\"yr\", :step => 1u\"d\")),\n    stop = 20u\"yr\",\n    snap = 365u\"d\",\n    metric = :rmse\n)","category":"page"},{"location":"tutorials/makingamodel/","page":"Making a model","title":"Making a model","text":"evaluate(LotkaVolterraDD, pelts_subset;\n    index = :Year => :y,\n    target = [:Hare => :N, :Lynx => :P],\n    config = (lvddcc, :Clock => (:init => 1900u\"yr\", :step => 1u\"d\")),\n    stop = 20u\"yr\",\n    snap = 365u\"d\",\n    metric = :ef\n)","category":"page"},{"location":"guide/inspection/","page":"Inspection","title":"Inspection","text":"using Cropbox","category":"page"},{"location":"guide/inspection/#Inspection","page":"Inspection","title":"Inspection","text":"","category":"section"},{"location":"guide/inspection/","page":"Inspection","title":"Inspection","text":"There are two inspective functions in Cropbox that allow us to look at systems more closely. For information regarding syntax, please check the reference.","category":"page"},{"location":"guide/inspection/","page":"Inspection","title":"Inspection","text":"look()\ndive()","category":"page"},{"location":"guide/inspection/#look","page":"Inspection","title":"look()","text":"","category":"section"},{"location":"guide/inspection/","page":"Inspection","title":"Inspection","text":"The look() provides a convenient way of accessing variables within a system.","category":"page"},{"location":"guide/inspection/","page":"Inspection","title":"Inspection","text":"Example","category":"page"},{"location":"guide/inspection/","page":"Inspection","title":"Inspection","text":"\"\"\"\nThis is a system.\n\"\"\"\n@system S begin\n    \"\"\"\n    This is a parameter.\n    \"\"\"\n    a ~ preserve(parameter)\nend\n\nlook(S)","category":"page"},{"location":"guide/inspection/","page":"Inspection","title":"Inspection","text":"look(S, :a)","category":"page"},{"location":"guide/inspection/","page":"Inspection","title":"Inspection","text":"note: Note\nThere is a macro version of this function, @look, which allows you to access a variable without using a symbol.@look S\n@look S a\n@look S, aBoth @look S.a and @look S a are identical to look(S, :a).","category":"page"},{"location":"guide/inspection/#dive","page":"Inspection","title":"dive()","text":"","category":"section"},{"location":"guide/inspection/","page":"Inspection","title":"Inspection","text":"The dive() function allows us to inspect an instance of a system by navigating through the hierarchy of variables displayed in a tree structure.","category":"page"},{"location":"guide/inspection/","page":"Inspection","title":"Inspection","text":"Pressing up/down arrow keys allows navigation. Press 'enter' to dive into a deeper level and press 'q' to come back. A leaf node of the tree shows an output of look regarding the variable. Pressing 'enter' again would return a variable itself and exit to REPL.","category":"page"},{"location":"guide/inspection/","page":"Inspection","title":"Inspection","text":"This function only works in a terminal environment and will not work in Jupyter Notebook.","category":"page"},{"location":"guide/inspection/","page":"Inspection","title":"Inspection","text":"Example","category":"page"},{"location":"guide/inspection/","page":"Inspection","title":"Inspection","text":"julia> @system S(Controller) begin\n           a => 1 ~ preserve(parameter)\n       end;\njulia> s = instance(S);\njulia> dive(s)\nS\n → context = <Context>\n   config = <Config>\n   a = 1.0","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"using Cropbox\nusing DataFrames","category":"page"},{"location":"guide/simulation/#Simulation","page":"Simulation","title":"Simulation","text":"","category":"section"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"There are four different functions in Cropbox for model simulation. For information regarding syntax, please check the reference.","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"instance()\nsimulate()\nevaluate()\ncalibrate()","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"tip: Tip\nWhen running any of these functions, do not forget to include Controller as a mixin for the system.","category":"page"},{"location":"guide/simulation/#instance","page":"Simulation","title":"instance()","text":"","category":"section"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"The instance() function is the core of all simulative functions. To run any kind of simulation of a system, the system must first be instantiated. The instance() function simply makes an instance of a system with an initial condition specified by a configuration and additional options.","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"Example","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"@system S(Controller) begin\n    a ~ advance\n    b => 1 ~ preserve(parameter)\n    c(a, b) => a*b ~ track\nend\n\ns = instance(S)","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"After creating an instance of a system, we can simulate the system manually, using the update!() function.","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"update!(s)","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"update!(s)","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"We can also specify a configuration object in the function to change or fill in parameter values of the system.","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"c = @config(:S => :b => 2)\n\ninstance(S; config=c)","category":"page"},{"location":"guide/simulation/#simulate","page":"Simulation","title":"simulate()","text":"","category":"section"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"simulate() runs a simulation by creating an instance of a specified system and updating it a specified number of times in order to generate an output in the form of a DataFrame. You can think of it as a combination of the instance() and the update!() function where each row of the DataFrame represents an update.","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"Example","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"@system S(Controller) begin\n    a ~ advance\n    b => 1 ~ preserve(parameter)\n    c(a, b) => a*b ~ track\nend\n\n simulate(S; stop=2)","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"Just like the instance() function, we can add a configuration object to change or fill in the parameter values.","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"c = @config(:S => :b => 2)\n\nsimulate(S; config=c, stop=2)","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"\n","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"tip: Tip\nWhen using the simulate() function, it is recommended to always include an argument for the stop keyword unless you only want to see the initial calculations.","category":"page"},{"location":"guide/simulation/#evaluate","page":"Simulation","title":"evaluate()","text":"","category":"section"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"The evaluate() function compares two datasets with a choice of evaluation metric. You can compare two DataFrames (commonly the observation and the estimation data), or a System and a DataFrame, which will automatically simulate the system to generate a DataFrame that can be compared. Naturally, if you already have a DataFrame output from a previous simulation, you can use the first method.","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"Two DataFrames","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"obs = DataFrame(time = [1, 2, 3]u\"hr\", a = [10, 20, 30]u\"g\")\n\nest = DataFrame(time = [1, 2, 3]u\"hr\", a = [11, 19, 31]u\"g\", b = [12, 22, 28]u\"g\")\n\nevaluate(obs, est; index = :time, target = :a, metric = :rmse)","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"If the column names are different, you can pair the columns in the target argument to compare the two.","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"evaluate(obs, est; index = :time, target = :a => :b)","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"System and a DataFrame","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"@system S(Controller) begin\n    p => 10 ~ preserve(parameter, u\"g/hr\")\n    t(context.clock.time) ~ track(u\"hr\")\n    a(p, t) => p*t ~ track(u\"g\")\nend\n\nevaluate(S, est; target = :a, stop = 3)","category":"page"},{"location":"guide/simulation/#calibrate","page":"Simulation","title":"calibrate()","text":"","category":"section"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"calibrate() is a function used to estimate a set of parameters for a given system, that will yield a simulation as closely as possible to a provided observation data. A multitude of simulations are conducted using different combinations of parameter values specified by a range of possible values. The optimal set of parameters is selected based on the chosen evaluation metric (RMSE by default). The algorithm used is the differential evolution algorithm from BlackBoxOptim.jl. The function returns a Config object that we can directly use in model simulations.","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"Example","category":"page"},{"location":"guide/simulation/","page":"Simulation","title":"Simulation","text":"@system S(Controller) begin\n           a => 0 ~ preserve(parameter)\n           b(a) ~ accumulate\nend\n\nobs = DataFrame(time=10u\"hr\", b=200)\n\np = calibrate(S, obs; target=:b, parameters=:S => :a => (0, 100), stop=10)","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"","category":"page"},{"location":"tutorials/usingamodel/#Using-an-Existing-Cropbox-Model","page":"Using an existing model","title":"Using an Existing Cropbox Model","text":"","category":"section"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"This tutorial will teach you how to use an existing Cropbox model. For this tutorial, we will be importing and utilizing a Cropbox model from a julia package called SimpleCrop.","category":"page"},{"location":"tutorials/usingamodel/#Installing-a-Cropbox-Model","page":"Using an existing model","title":"Installing a Cropbox Model","text":"","category":"section"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"Often times, the Cropbox model that you want to use will be part of a Julia package.","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"If the package you want to install is under the official Julia package registry, you can simply install the package using the following command.","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"using Pkg\nPkg.add(\"SimpleCrop\")","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"You can also install any Julia package using a GitHub link.","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"using Pkg\nPkg.add(\"https://github.com/cropbox/SimpleCrop.jl\")","category":"page"},{"location":"tutorials/usingamodel/#Importing-a-Cropbox-Model","page":"Using an existing model","title":"Importing a Cropbox Model","text":"","category":"section"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"To start using a Julia package containing your desired model, you must first load the package into your environment.","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"This can be done by using this simple command.","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"using SimpleCrop","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"Let's not forget to load Cropbox as well.","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"using Cropbox","category":"page"},{"location":"tutorials/usingamodel/#Inspecting-the-Model","page":"Using an existing model","title":"Inspecting the Model","text":"","category":"section"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"The model is implemented as a system named Model defined in SimpleCrop module. We can inspect the model with the @look macro, which will show us all the variables in the system.  ","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"@look SimpleCrop.Model","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"@look can also be used to inspect individual state variables. ","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"@look SimpleCrop.Model.W","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"The relationship between the variables in the model can be visualized using a dependency graph. ","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"Cropbox.dependency(SimpleCrop.Model)","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"If an arrow points from one variable to a second variable, then the value of the second variable depends on, or is calculated with, the value of the first. ","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"We can view the values of all the parameters of the model with the following command.","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"parameters(SimpleCrop.Model; alias = true)","category":"page"},{"location":"tutorials/usingamodel/#Running-a-Simulation","page":"Using an existing model","title":"Running a Simulation","text":"","category":"section"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"As many parameters are already defined in the model, we only need to prepare time-series data for daily weather and irrigation, which are included in the package for convenience.","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"using CSV\nusing DataFrames\nusing Dates\nusing TimeZones\n\nloaddata(f) = CSV.File(joinpath(dirname(pathof(SimpleCrop)), \"../test/data\", f)) |> DataFrame\n; # hide","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"config = @config (\n    :Clock => :step => 1u\"d\",\n    :Calendar => :init => ZonedDateTime(1987, 1, 1, tz\"UTC\"),\n    :Weather => :weather_data => loaddata(\"weather.csv\"),\n    :SoilWater => :irrigation_data => loaddata(\"irrigation.csv\"),\n)\n; # hide","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"Let's run a simulation with the model using configuration we just created. Stop condition for simulation is defined in a flag variable named endsim which coincides with plant maturity or the end of reproductive stage.","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"r = simulate(SimpleCrop.Model; config, stop = :endsim)\n; # hide","category":"page"},{"location":"tutorials/usingamodel/#Visualizing-the-Results","page":"Using an existing model","title":"Visualizing the Results","text":"","category":"section"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"The output of simulation is now contained in a data frame from which we generate multiple plots. The number of leaf (N) went from initial_leaf_number (= 2) to maximum_leaf_number (= 12) as indicated in the default set of parameters.","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"visualize(r, :DATE, :N; ylim = (0, 15), kind = :line)","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"Thermal degree days (INT) started accumulating from mid-August with the onset of reproductive stage until late-October when it reaches the maturity indicated by duration_of_reproductive_stage (= 300 K d).","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"visualize(r, :DATE, :INT; kind = :line)","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"Assimilated carbon (W) was partitioned into multiple parts of the plant as shown in the plot of dry biomass.","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"visualize(r, :DATE, [:W, :Wc, :Wr, :Wf];\n    names = [\"Total\", \"Canopy\", \"Root\", \"Fruit\"], kind = :line)","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"Leaf area index (LAI) reached its peak at the end of vegetative stage then began declining throughout reproductive stage.","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"visualize(r, :DATE, :LAI; kind = :line)","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"For soil water balance, here is a plot showing water runoff (ROF), infiltration (INF), and vertical drainage (DRN).","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"visualize(r, :DATE, [:ROF, :INF, :DRN]; kind = :line)","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"Soil water status has influence on potential evapotranspiration (ETp), actual soil evaporation (ESa), and actual plant transpiration (ESp).","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"visualize(r, :DATE, [:ETp, :ESa, :EPa]; kind = :line)","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"The resulting soil water content (SWC) is shown here.","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"visualize(r, :DATE, :SWC; ylim = (0, 400), kind = :line)","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"Which, in turn, determines soil water stress factor (SWFAC) in this model.","category":"page"},{"location":"tutorials/usingamodel/","page":"Using an existing model","title":"Using an existing model","text":"visualize(r, :DATE, [:SWFAC, :SWFAC1, :SWFAC2]; ylim = (0, 1), kind = :line)","category":"page"},{"location":"gallery/#Gallery","page":"Gallery","title":"Gallery","text":"","category":"section"},{"location":"gallery/","page":"Gallery","title":"Gallery","text":"Here are some models built using the Cropbox framework.","category":"page"},{"location":"gallery/#[CropRootBox.jl](https://github.com/cropbox/CropRootBox.jl)","page":"Gallery","title":"CropRootBox.jl","text":"","category":"section"},{"location":"gallery/#[Garlic.jl](https://github.com/cropbox/Garlic.jl)","page":"Gallery","title":"Garlic.jl","text":"","category":"section"},{"location":"gallery/#[LeafGasExchange.jl](https://github.com/cropbox/LeafGasExchange.jl)","page":"Gallery","title":"LeafGasExchange.jl","text":"","category":"section"},{"location":"gallery/#[SimpleCrop.jl](https://github.com/cropbox/SimpleCrop.jl)","page":"Gallery","title":"SimpleCrop.jl","text":"","category":"section"},{"location":"reference/simulation/#Simulation1","page":"Simulation","title":"Simulation","text":"","category":"section"},{"location":"reference/simulation/","page":"Simulation","title":"Simulation","text":"instance\nsimulate\nevaluate\ncalibrate","category":"page"},{"location":"reference/simulation/#Cropbox.instance","page":"Simulation","title":"Cropbox.instance","text":"instance(S; <keyword arguments>) -> S\n\nMake an instance of system S with an initial condition specified in configuration and additional options.\n\nSee also: @config, simulate\n\nArguments\n\nS::Type{<:System}: type of system to be instantiated.\n\nKeyword Arguments\n\nconfig=(): configuration containing parameter values for the system.\noptions=(): keyword arguments passed down to the constructor of S; named tuple expected.\nseed=nothing: random seed initialized before parsing configuration and making an instance.\n\nExamples\n\njulia> @system S(Controller) begin\n           a => 1 ~ preserve(parameter)\n           b(a) ~ accumulate\n       end;\n\njulia> instance(S)\nS\n  context = <Context>\n  config = <Config>\n  a = 1.0\n  b = 0.0\n\n\n\n\n\n","category":"function"},{"location":"reference/simulation/#Cropbox.simulate","page":"Simulation","title":"Cropbox.simulate","text":"simulate([f,] S[, layout, [configs]]; <keyword arguments>) -> DataFrame\n\nRun simulations by making instance of system S with given configuration to generate an output in the form of DataFrame. layout contains a list of variables to be saved in the output. A layout of single simulation can be specified in the layout arguments placed as keyword arguments. configs contains a list of configurations for each run of simulation. Total number of simulation runs equals to the size of configs. For a single configuration, config keyword argument may be preferred. Optional callback function f allows do-block syntax to specify snatch argument for finer control of output format.\n\nSee also: instance, @config\n\nArguments\n\nS::Type{<:System}: type of system to be simulated.\nlayout::Vector: list of output layout definition in a named tuple (; base, index, target, meta).\nconfigs::Vector: list of configurations for defining multiple runs of simluations.\n\nKeyword Arguments\n\nLayout\n\nbase=nothing: base system where index and target are populated; default falls back to the instance of S.\nindex=nothing: variables to construct index columns of the output; default falls back to context.clock.time.\ntarget=nothing: variables to construct non-index columns of the output; default includes most variables in the root instance.\nmeta=nothing: name of systems in the configuration to be included in the output as metadata.\n\nConfiguration\n\nconfig=(): a single configuration for the system, or a base for multiple configurations (when used with configs).\nconfigs=[]: multiple configurations for the system.\nseed=nothing: random seed for resetting each simulation run.\n\nProgress\n\nstop=nothing: condition checked before calling updates for the instance; default stops with no update.\nsnap=nothing: condition checked to decide if a snapshot of current update is saved in the output; default snaps all updates.\nsnatch=nothing: callback for modifying intermediate output; list of DataFrame D collected from current update and the instance of system s are provided.\nverbose=true: shows a progress bar.\n\nFormat\n\nnounit=false: remove units from the output.\nlong=false: convert output table from wide to long format.\n\nExamples\n\njulia> @system S(Controller) begin\n           a => 1 ~ preserve(parameter)\n           b(a) ~ accumulate\n       end;\n\njulia> simulate(S; stop=1)\n2×3 DataFrame\n Row │ time       a        b\n     │ Quantity…  Float64  Float64\n─────┼─────────────────────────────\n   1 │    0.0 hr      1.0      0.0\n   2 │    1.0 hr      1.0      1.0\n\n\n\n\n\n","category":"function"},{"location":"reference/simulation/#Cropbox.evaluate","page":"Simulation","title":"Cropbox.evaluate","text":"evaluate(S, obs; <keyword arguments>) -> Number | Tuple\n\nCompare output of simulation results for the given system S and observation data obs with a choice of evaluation metric.\n\nArguments\n\nS::Type{<:System}: type of system to be evaluated.\nobs::DataFrame: observation data to be used for evaluation.\n\nKeyword Arguments\n\nConfiguration\n\nconfig=(): a single configuration for the system (can't be used with configs).\nconfigs=[]: multiple configurations for the system (can't be used with config).\n\nLayout\n\nindex=nothing: variables to construct index columns of the output; default falls back to context.clock.time.\ntarget: variables to construct non-index columns of the output.\n\nEvaluation\n\nmetric=nothing: evaluation metric (:rmse, :nrmse, :mae, :mape, :ef, :dr); default is RMSE.\n\nRemaining keyword arguments are passed down to simulate with regard to running system S.\n\nSee also: simulate, calibrate, @config\n\nExamples\n\njulia> @system S(Controller) begin\n           a => 19 ~ preserve(u\"m/hr\", parameter)\n           b(a) ~ accumulate(u\"m\")\n       end;\n\njulia> obs = DataFrame(time=10u\"hr\", b=200u\"m\");\n\njulia> configs = @config !(:S => :a => [19, 21]);\n\njulia> evaluate(S, obs; configs, target=:b, stop=10u\"hr\")\n10.0 m\n\n\n\n\n\nevaluate(obs, est; <keyword arguments>) -> Number | Tuple\n\nCompare observation data obs and estimation data est with a choice of evaluation metric.\n\nArguments\n\nobs::DataFrame: observation data to be used for evaluation.\nest::DataFrame: estimated data from simulation.\n\nKeyword Arguments\n\nLayout\n\nindex: variables referring to index columns of the output.\ntarget: variables referring to non-index columns of the output.\n\nEvaluation\n\nmetric=nothing: evaluation metric (:rmse, :nrmse, :mae, :mape, :ef, :dr); default is RMSE.\n\nSee also: evaluate\n\nExamples\n\njulia> obs = DataFrame(time = [1, 2, 3]u\"hr\", b = [10, 20, 30]u\"g\");\n\njulia> est = DataFrame(time = [1, 2, 3]u\"hr\", b = [10, 20, 30]u\"g\", c = [11, 19, 31]u\"g\");\n\njulia> evaluate(obs, est; index = :time, target = :b)\n0.0 g\n\njulia> evaluate(obs, est; index = :time, target = :b => :c)\n1.0 g\n\n\n\n\n\n","category":"function"},{"location":"reference/simulation/#Cropbox.calibrate","page":"Simulation","title":"Cropbox.calibrate","text":"calibrate(S, obs; <keyword arguments>) -> Config | OrderedDict\n\nObtain a set of parameters for the given system S that simulates provided observation obs closely as possible. A multitude of simulations are conducted with a differing combination of parameter sets specified by the range of possible values and the optimum is selected based on a choice of evaluation metric. Internally, differential evolution algorithm from BlackboxOptim.jl is used.\n\nArguments\n\nS::Type{<:System}: type of system to be calibrated.\nobs::DataFrame: observation data to be used for calibration.\n\nKeyword Arguments\n\nConfiguration\n\nconfig=(): a single base configuration for the system (can't be used with configs).\nconfigs=[]: multiple base configurations for the system (can't be used with config).\n\nLayout\n\nindex=nothing: variables to construct index columns of the output; default falls back to context.clock.time.\ntarget: variables to construct non-index columns of the output.\n\nCalibration\n\nparameters: parameters with a range of boundary values to be calibrated within.\nmetric=nothing: evaluation metric (:rmse, :nrmse, :mae, :mape, :ef, :dr); default is RMSE.\n\nMulti-objective\n\nweight=nothing: weights for calibrating multiple targets; default assumes equal weights.\npareto=false: returns a dictionary containing Pareto frontier instead of a single solution satisfying multiple targets.\n\nAdvanced\n\noptim=(): extra options for BlackBoxOptim.bboptimize.\n\nRemaining keyword arguments are passed down to simulate with regard to running system S.\n\nSee also: simulate, evaluate, @config\n\nExamples\n\njulia> @system S(Controller) begin\n           a => 0 ~ preserve(parameter)\n           b(a) ~ accumulate\n       end;\n\njulia> obs = DataFrame(time=10u\"hr\", b=200);\n\njulia> p = calibrate(S, obs; target=:b, parameters=:S => :a => (0, 100), stop=10)\n...\nConfig for 1 system:\n  S\n    a = 20.0\n\n\n\n\n\n","category":"function"},{"location":"guide/system/","page":"System","title":"System","text":"using Cropbox","category":"page"},{"location":"guide/system/#system","page":"System","title":"System","text":"","category":"section"},{"location":"guide/system/","page":"System","title":"System","text":"In Cropbox, a system is a unit of model component that contains a collection of variables. The framework guarantees that the most current state of a variable is accessible by another variable that depends on said variable, provided that they are within the same system. To ensure a correct propagation of variable states, the system must have a linear order of computation that satisfies all the requirements for dependency imposed by variable declarations. Any inconsistency caused by a cyclic dependency between variables stops code generation and results in an error. This is intentional, as we want to avoid such logical errors from going through unnoticed. ","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"Once a system is defined, its structure is fixed and variables cannot be added or removed. The variables themselves, however, can still be updated throughout time steps. Variables declared in another system can be also accessed if the entire system holding dependent variables has already been updated. This is done by declaring an external system as a member of another system.","category":"page"},{"location":"guide/system/#Creating-a-System","page":"System","title":"Creating a System","text":"","category":"section"},{"location":"guide/system/","page":"System","title":"System","text":"A system in Cropbox is created through the Cropbox-specific macro, @system.","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"@system name[{patches..}][(mixins..)] [<: type] [decl] -> Type{<:System}","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"@system declares a new system called name, with new variables declared in decl block using a custom syntax. mixins allow specifications of existing systems to be used for the new system. patches may provide type substitution and/or constant definition needed for advanced use. ","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"Example","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"Here is an example of what a simple system may look like.","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"@system begin\n    i => 1 ~ preserve\n    a => 0.1 ~ preserve(parameter)\n    r(a, x) => a*x ~ track\n    x(r) ~ accumulate(init = i)\nend","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"In this system, we declared four variables.","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"i: variable containing initial value of x which never changes (preserved)\na: variable containing constant parameter of exponential growth\nr: rate variable which needs to be calculated or tracked every time step\nx: state variable which accumulates by rate r over time with initial value i","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"note: Note\nWe can use the Julia macro @macroexpand to see the expression generated by the @system macro.","category":"page"},{"location":"guide/system/#Mixin","page":"System","title":"Mixin","text":"","category":"section"},{"location":"guide/system/","page":"System","title":"System","text":"A mixin is a system that is included as a part another system. While each system implements its own set of variables, these variables can be linked with variables from other systems through the use of mixins. Controller is a mixin required to instantiate a system.","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"Example","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"Here is an example where the system S3 is declared with systems S1 and S2 as mixins.","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"@system S1 begin\n    a => 1 ~ preserve(parameter)\n    b(a) => 2a ~ track\nend\n\n@system S2 begin\n    a => 2 ~ preserve(parameter)\n    b(a, c) => a*c ~ track\n    c => 1 ~ preserve\nend\n\n@system S3(S1, S2, Controller) begin\n    d(a) => 3a ~ preserve\nend\n\ninstance(S3)","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"note: Note\nThe order of mixins when creating a system is significant. When two variables from two different mixins share a name, the variable from the latter mixin in the system declaration will take priority over the first.","category":"page"},{"location":"guide/system/#Context","page":"System","title":"Context","text":"","category":"section"},{"location":"guide/system/","page":"System","title":"System","text":"Whenever a system is constructed in Cropbox, an internal variable named context referencing to an instance of a Context system is included by default. The purpose of the Context system is to manage the time and configuration of a system.","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"This is what the Context system looks like:","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"@system Context begin\n    context       ~ ::Nothing\n    config        ~ ::Config(override)\n    clock(config) ~ ::Clock\nend","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"The variables config and clock, referencing to the systems Config and Clock respectively, are necessary for system instantiation and thus included in every new system by default.","category":"page"},{"location":"guide/system/#Clock","page":"System","title":"Clock","text":"","category":"section"},{"location":"guide/system/","page":"System","title":"System","text":"Within the Context system, there is a clock variable referring to the Clock system. The Clock system is responsible for keeping track of time-related variables, namely init, step, time, and tick.","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"This is what the Clock system looks like:","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"abstract type Clock <: System end\ntimeunit(::Type{<:Clock}) = u\"hr\"\n@system Clock{timeunit = timeunit(Clock)} begin\n    context ~ ::Nothing\n    config ~ ::Config(override)\n    init => 0 ~ preserve(unit=timeunit, parameter)\n    step => 1 ~ preserve(unit=timeunit, parameter)\n    time => nothing ~ advance(init=init, step=step, unit=timeunit)\n    tick => nothing ~ advance::int\nend","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"time is an advance variable which is essentially an accumulate variable tailored for keeping time of simulation. By default, time starts at hour 0 and increases by 1-hour intervals. tick is another time variable that is responsible for keeping track of the number of updates performed. As a result, context.clock.time and context.clock.tick are often used as the index for the x-axis of plots and visualizations. The step variable is determines the time-step intervals of simulation. ","category":"page"},{"location":"guide/system/#Config","page":"System","title":"Config","text":"","category":"section"},{"location":"guide/system/","page":"System","title":"System","text":"Unlike the Clock system, the Config referred to by the config variable in Context is not a system. Config is a configuration object structured as a nested dictionary or hash table to store user-defined parameter values as a triplet of system - variable - value. When a configuration object containing specified parameter values are provided to a instantiation of a system, the corresponding variables in the system with the tag parameter will have the configuration values plugged in. Read more about configurations here.","category":"page"},{"location":"guide/system/#Controller","page":"System","title":"Controller","text":"","category":"section"},{"location":"guide/system/","page":"System","title":"System","text":"An instance of context and configuration provided to an instance of a new system is usually sourced by a parent system that holds a variable referring to that system. However, because there is no parent system for the instantiation of the first system, context and configuration need to be supplied elsewhere. Controller is a pre-built system of Cropbox made to handle such issues by creating an instance of Context by itself.","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"This is what the Controller system looks like:","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"@system Controller begin\n    config ~ ::Config(override)\n    context(config) ~ ::Context(context)\nend","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"The Config object referred to by the config variable is overridden by a keyword argument (config) of the system constructor instance() and functions such as simulate() and visualize(). Therefore at least one (and usually only one) system is designated to possess Controller as one of its mixins. In order to run an instance or a simulation of a system, Controller must be included as a mixin. Unlike the system Context, Controller must be explicitly declared as a mixin when declaring a system.","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"tip: Tip\nWhen you create a system that you want to instantiate, make sure to have Controller as a mixin. You can also make a system instantiable by making a new system with the original system and Controller as mixins.","category":"page"},{"location":"guide/system/#Calendar","page":"System","title":"Calendar","text":"","category":"section"},{"location":"guide/system/","page":"System","title":"System","text":"Calendar is a system similar to the Clock system. Calendar provides time and step variables, but in the type of ZonedDateTime from TimeZones.jl. Much like Clock, Calendar is a pre-built Cropbox system, but Calendar is not included by default as a variable reference like context for the system Context. Also, unlike Clock, Calendar is not embedded in Context.","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"This is what the Calendar system looks like:","category":"page"},{"location":"guide/system/","page":"System","title":"System","text":"@system Calendar begin\n    init ~ preserve::datetime(extern, parameter)\n    last => nothing ~ preserve::datetime(extern, parameter, optional)\n    time(t0=init, t=context.clock.time) => t0 + convert(Cropbox.Dates.Second, t) ~ track::datetime\n    date(time) => Cropbox.Dates.Date(time) ~ track::date\n    step(context.clock.step) ~ preserve(u\"hr\")\n    stop(time, last) => begin\n        isnothing(last) ? false : (time >= last)\n    end ~ flag\n    count(init, last, step) => begin\n        if isnothing(last)\n            nothing\n        else\n            # number of update!() required to reach `last` time\n            (last - init) / step\n        end\n    end ~ preserve::int(round, optional)\nend","category":"page"},{"location":"reference/declaration/#Declaration","page":"Declaration","title":"Declaration","text":"","category":"section"},{"location":"reference/declaration/","page":"Declaration","title":"Declaration","text":"@system\n@config","category":"page"},{"location":"reference/declaration/#Cropbox.@system","page":"Declaration","title":"Cropbox.@system","text":"@system name[{patches..}][(mixins..)] [<: type] [decl] -> Type{<:System}\n\nDeclare a new system called name with new variables declared in decl block using a custom syntax. The resultant system is subtype of System or a custom type. mixins allows reusing specification of existing systems to be pasted into the declaration of new system. patches may provide type substitution and/or constant definition needed for advanced use.\n\nVariable\n\nname[(args..; kwargs..)][: alias] [=> expr] [~ [state][::type|<:type][(tags..)]]\n\nname: variable name; usually short abbreviation.\nargs: automatically bound depending variables\nkwargs: custom bound depending variables; used by call and integrate.\nalias: alternative name; long description.\nexpr: state-specific code snippet; use begin-end block for multiple statements.\ntype: internal data type; default is Float64 for many, but not all, variables.\ntags: state-specific options; unit, min/max, etc.\n\nStates\n\nhold: marks a placeholder for variable shared between mixins.\nwrap: passes a state variable to other fucnction as is with no unwrapping its value.\nadvance: manages a time-keeping variable; time and tick from Clock.\npreserve: keeps initially assigned value with no further updates; constants, parameters.\ntabulate: makes a two dimensional table with named keys; i.e. partitioning table.\ninterpolate: makes a curve function interpolated with discrete values; i.e. soil characteristic curve.\ntrack: evaluates variable expression as is for each update.\nremember: keeps tracking variable until a certain condition is met; essentially track turning into preserve.\nprovide: manages a table of time-series in DataFrame.\ndrive: fetches the current value from a time-series; maybe supplied by provide.\ncall: defines a partial function bound with some variables.\nintegrate: calculates integral using Gaussian method; not for time domain.\naccumulate: emulates integration of rate variable over time; essentially Euler method.\ncapture: calculates difference between integration for each time step.\nflag: sets a boolean flag; essentially track::Bool.\nproduce: attaches a new instance of system dynamically constructed; i.e. root structure growth.\nbisect: solves nonlinear equation using bisection method; i.e. gas-exchange model coupling.\nsolve: solves polynomial equation symbolically; i.e. quadratic equations in photosynthesis model.\n\nExamples\n\njulia> @system S(Controller) begin\n           a => 1 ~ preserve(parameter)\n           b(a) ~ accumulate\n       end\nS\n\n\n\n\n\n","category":"macro"},{"location":"reference/declaration/#Cropbox.@config","page":"Declaration","title":"Cropbox.@config","text":"@config c.. -> Config | Vector{Config}\n\nConstruct a set or multiple sets of configuration.\n\nA basic unit of configuration for a system S is represented by a pair in the form of S => pv. System name S is expressed in a symbol. If actual type of system is used, its name will be automatically converted to a symbol.\n\nA parameter name and corresponding value is then represented by another pair in the form of p => v. When specifiying multiple parameters, a tuple of pairs like (p1 => v1, p2 => v2) or a named tuple like (p1 = v1, p2 = v2) can be used. Parameter name must be a symbol and should indicate a variable declared with parameter tag as often used by preserve state variable. For example, :S => (:a => 1, :b => 2) has the same meaning as S => (a = 1, b = 2) in the same scope.\n\nConfigurations for multiple systems can be concatenated by a tuple. Multiple elements in c separated by commas implicitly forms a tuple. For example, :S => (:a => 1, :b => 2), :T => :x => 1 represents a set of configuration for two systems S and T with some parameters. When the same names of system or variable appears again during concatenation, it will be overriden by later ones in an order appeared in a tuple. For example, :S => :a => 1, :S => :a => 2 results into :S => :a => 2. Instead of commas, + operator can be used in a similar way as (:S => :a => 1) + (:S => :a => 2). Note parentheses placed due to operator precedence.\n\nWhen multiple sets of configurations are needed, as in configs for simulate, a vector of Config is used. This macro supports some convenient ways to construct a vector by composing simpler configurations. Prefix operator ! allows expansion of any iterable placed in the configuration value. Infix operator * allows multiplication of a vector of configurations with another vector or a single configuration to construct multiple sets of configurations. For example, !(:S => :a => 1:2) is expanded into two sets of separate configurations [:S => :a => 1, :S => :a => 2]. (:S => :a => 1:2) * (:S => :b => 0) is multiplied into [:S => (a = 1, b = 0), :S => (a = 2, b = 0)].\n\nExamples\n\njulia> @config :S => (:a => 1, :b => 2)\nConfig for 1 system:\n  S\n    a = 1\n    b = 2\n\njulia> @config :S => :a => 1, :S => :a => 2\nConfig for 1 system:\n  S\n    a = 2\n\njulia> @config !(:S => :a => 1:2)\n2-element Vector{Config}:\n <Config>\n <Config>\n\njulia> @config (:S => :a => 1:2) * (:S => :b => 0)\n2-element Vector{Config}:\n <Config>\n <Config>\n\n\n\n\n\n","category":"macro"},{"location":"#Cropbox","page":"Cropbox","title":"Cropbox","text":"","category":"section"},{"location":"#What-is-Cropbox?","page":"Cropbox","title":"What is Cropbox?","text":"","category":"section"},{"location":"","page":"Cropbox","title":"Cropbox","text":"Cropbox is a declarative modeling framework specifically designed for developing crop models. The goal is to let crop modelers focus on what the model should look like rather than how the model is technically implemented under the hood.","category":"page"},{"location":"#Getting-started","page":"Cropbox","title":"Getting started","text":"","category":"section"},{"location":"","page":"Cropbox","title":"Cropbox","text":"Read the Installation.\nRead the Tutorials.\nRead the Manual.\nCheck out the Cropbox Tutorial presented at the KSAFM 2020 Workshop\nCheck out the course material for SEFS 508, a plant modeling course at the University of Washington.\nCheck out the Gallery to see what others have done with the Cropbox framework.","category":"page"},{"location":"#Citation","page":"Cropbox","title":"Citation","text":"","category":"section"},{"location":"","page":"Cropbox","title":"Cropbox","text":"When using Cropbox in your work, please cite the following paper:","category":"page"},{"location":"","page":"Cropbox","title":"Cropbox","text":"Yun K, Kim S-H (2023) Cropbox: a declarative crop modelling framework. in silico Plants 5(1), diac021 (https://doi.org/10.1093/insilicoplants/diac021)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"using Cropbox\nusing DataFrames","category":"page"},{"location":"guide/variable/#variable","page":"Variable","title":"Variable","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"In Cropbox, a variable is defined as a unit element of modeling that denotes a value determined by a specific operation relying on other variables. Each variable represents a field within the system struct defined by the @system macro.","category":"page"},{"location":"guide/variable/#Variable-Declaration","page":"Variable","title":"Variable Declaration","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Variables are declared when a system is declared with the @system macro. @system macro accepts lines of variable declaration specified by its own syntax. They are loosely based on Julia syntax sharing common expressions and operators, but have distinct semantics as explained below.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"name[(args..; kwargs..)][: alias] [=> body] ~ [state][::type][(tags..)]","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"name: variable name (usually short abbreviation)\nargs: automatically bound depending variables\nkwargs: custom bound depending variables (only for call now)\nalias: alternative name (long description)\nbody: code snippet (state/type specific, begin .. end block for multiple lines)\nstate: verb indicating kind of state (empty if not State-based)\ntype: internal type (i.e. Float64 by default for most State variable)\ntags: variable specific options (i.e. unit, min/max, etc.)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Here is an example of a system declaration where all three variables are valid declarations:","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S begin\n    a: variable_a ~ advance\n    b(a) => a^2 ~ track\n    c => true ~ ::Bool\nend","category":"page"},{"location":"guide/variable/#Variable-States","page":"Variable","title":"Variable States","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Within Cropbox, a variable inside a system can be one of many different abstract types based on the variable's purpose. Depending on its type, each variable has its own behavior when a system is instantiated. In Cropbox, we refer to these as the state of the variables, originating from the term state variables often used in mathematical modeling.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"note: Note\nSpecifying a state is not mandatory when declaring a variable. Cropbox also allows plain variables, which are commonly used for creating variable references to other systems. ","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Currently, there are 19 different variable states implemented in Cropbox.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Instant derivation","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"preserve: keeps an initially assigned value with no further updates; constants, parameters\ntrack : evaluates expression and assigns a new value for each time step\nflag : checks a conditional logic; similar to track with boolean type, but composition is allowed\nremember : keeps tracking the variable until a certain condition is met; like track switching to preserve","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Cumulative update","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"accumulate: emulates integration of a rate variable over time; essentially Euler method\ncapture: calculates the difference between time steps\nintegrate: calculates an integral over a non-time variable using Gaussian method\nadvance: updates an internal time-keeping variable","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Data source","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"provide: provides a table-like multi-column time-series data; i.e. weather data\ndrive: fetches the current value from a time-series; often used with provide; i.e. air temperature\ntabulate: makes a two dimensional table with named keys; i.e. partitioning table\ninterpolate: makes a curve function interpolated with discrete values; i.e. soil characteristic curve","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Equation solving","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"solve: solves a polynomial equation symbolically; i.e. quadratic equation for coupling photosynthesis\nbisect: solves a nonlinear equation using bisection method; i.e. energy balance equation","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Dynamic structure","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"produce: attaches a new instance of dynamically generated system; i.e. root structure growth","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Language extension","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"hold: marks a placeholder for the variable shared between mixins\nwrap: allows passing a reference to the state variable object, not a dereferenced value\ncall: defines a partial function accepting user-defined arguments, while bound to other variables\nbring: duplicates variables declaration from another system into the current system","category":"page"},{"location":"guide/variable/#*Instant-derivation*","page":"Variable","title":"Instant derivation","text":"","category":"section"},{"location":"guide/variable/#preserve","page":"Variable","title":"preserve","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"preserve variables are fixed values with no further modification after instantiation of a system. As a result, they are often used as the state for parameter variables, which allow any initial value to be set via a configuration object supplied at the start of a simulation. Non-parameter constants are also used for fixed variables that do not need to be computed at each time step.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Supported tags: unit, optional, parameter, override, extern, ref, min, max, round","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a => 1 ~ preserve\nend\n\nsimulate(S; stop=2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#track","page":"Variable","title":"track","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"track variables are evaluated and assigned a new value at every time step. In a conventional model, these are the variables that would be computed in every update loop. At every time step, the formula in the variable code is evaluated and saved for use. This assignment of value occurs only once per time step, as intended by the Cropbox framework. No manual assignment of computation at an arbitrary time is allowed. This is to ensure that that there are no logical errors resulting from premature or incorrectly ordered variable assignments. For example, a cyclical reference between two track variables is caught by Cropbox as an error.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Supported tags: unit, override, extern, ref, skip, init, min, max, round, when","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a ~ advance\n    b(a) => 2*a ~ track\nend\n\nsimulate(S; stop=2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#flag","page":"Variable","title":"flag","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"flag variables are expressed in a conditional statement or logical operator for which a boolean value is evaluated at every time step. They function like a track variable but with a boolean value.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Supported tags: parameter, override, extern, once, when","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a ~ advance\n    b => 1 ~ preserve\n\n    f(a, b) => (a > b) ~ flag\nend\n\nsimulate(S; stop=2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#remember","page":"Variable","title":"remember","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"remember variables keep track of a variable until a specified condition is met. When the condition is met, it is saved as either its latest update or a specified value. They are like track variables that turn into preserve variables. The when tag is required to specify condition. Unless specified, the initial value for remember defaults to 0.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Supported tags: unit, init, when","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    t(context.clock.tick) ~ track\n    f(t) => t > 1 ~ flag\n    r1(t) ~ remember(when=f)\n    r2(t) => t^2 ~ remember(when=f)\nend\n\nsimulate(S; stop=2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#*Cumulative-update*","page":"Variable","title":"Cumulative update","text":"","category":"section"},{"location":"guide/variable/#accumulate","page":"Variable","title":"accumulate","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"accumulate variables emulate the integration of a rate variable over time. It uses the Euler's method of integration. By default, an accumulate variable accumulates every hour, unless a unit of time is specified.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Supported tags: unit, init, time, timeunit, reset, min, max, when","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a => 1 ~ accumulate\n    b => 1 ~ accumulate(u\"d\")\nend\n\nsimulate(S; stop=2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#capture","page":"Variable","title":"capture","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"capture variables calculate the difference of a variable between time steps. The time tag allows evaluations for varying rates of time.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Supported tags: unit, time, timeunit, when","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a => 1 ~ track\n    b(a) => a + 1 ~ capture\n    c(a) => a + 1 ~ accumulate\nend\n\nsimulate(S; stop=2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#integrate","page":"Variable","title":"integrate","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"integrate variables calculate an integral over a non-time variable using the Gaussian method.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Supported tags: unit, from, to","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    w => 1 ~ preserve(parameter)\n    a => 0 ~ preserve(parameter)\n    b => π ~ preserve(parameter)\n    f(w; x) => w*sin(x) ~ integrate(from=a, to=b)\nend\n\ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#advance","page":"Variable","title":"advance","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"advance variables update an internal time-keeping variable. By default, it starts at 0 and increases by 1 every time step. Note that the unit does not have to be time-related.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Supported tags: init, step, unit","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a ~ advance(init=1)\n    b ~ advance(step=2)\n    c ~ advance(u\"m\")\nend\n\nsimulate(S; stop=2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#*Data-source*","page":"Variable","title":"Data source","text":"","category":"section"},{"location":"guide/variable/#provide","page":"Variable","title":"provide","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"provide variables provide a DataFrame with a given index (index) starting from an initial value (init). By default, autounit is true, meaning that provide variables will attempt to get units from column names.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Supported tags: index, init, step, autounit, parameter","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a => DataFrame(\"index (hr)\" => 0:2, \"value (m)\" => 0:10:20) ~ provide\nend\n\ninstance(S).a","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#drive","page":"Variable","title":"drive","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"drive variables fetch the current value from a time-series. It is often used in conjunction with provide.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Supported tags: tick, unit, from, by, parameter, override","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a => [2, 4, 6] ~ drive\nend\n\nsimulate(S; stop=2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#tabulate","page":"Variable","title":"tabulate","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"tabulate variables make a two dimensional table with named keys. The rows tag must be assigned.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Supported tags: unit, rows, columns, parameter","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    T => [\n      # a b\n        0 4 ; # A\n        1 5 ; # B\n        2 6 ; # C \n        3 7 ; # D\n    ] ~ tabulate(rows=(:A, :B, :C, :D), columns=(:a, :b))\nend\n\ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#interpolate","page":"Variable","title":"interpolate","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"interpolate variables make a curve function for a provided set of discrete values.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Supported tags: unit, knotunit, reverse, parameter","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    m => [1 => 10, 2 => 20, 3 => 30] ~ interpolate\n    a(m) => m(2.5) ~ track\nend\n\ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"A matrix can also be used instead of a vector of pairs.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    m => [1 10; 2 20; 3 30] ~ interpolate\n    a(m) => m(2.5) ~ track\nend\n\ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#*Equation-solving*","page":"Variable","title":"Equation solving","text":"","category":"section"},{"location":"guide/variable/#solve","page":"Variable","title":"solve","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"solve variables solve a polynomial equation symbolically. By default, it will return the highest solution. Therefore, when using the lower tag, it is recommended to pair it with another tag.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Supported tags: unit, lower, upper, pick","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"The solution is x = 1, 2, 3","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a => 1 ~ preserve(parameter)\n    b => -6 ~ preserve(parameter)\n    c => 11 ~ preserve(parameter)\n    d => -6 ~ preserve(parameter)\n    x(a, b, c, d) => begin\n        a*x^3 + b*x^2 + c*x + d\n    end ~ solve\nend\n\ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#bisect","page":"Variable","title":"bisect","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"bisect variables solve a nonlinear equation using the bisection method. The tags lower and upper must be provided.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Supported tags: unit, evalunit, lower, upper, maxiter, tol, min, max","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"The solution is x = 1, 2, 3","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    x(x) => x^3 - 6x^2 + 11x - 6 ~ bisect(lower=0, upper=3)\nend\n\ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#*Dynamic-structure*","page":"Variable","title":"Dynamic structure","text":"","category":"section"},{"location":"guide/variable/#produce","page":"Variable","title":"produce","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"produce variables attach a new instance of a dynamically generated system.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Supported tags: single, when","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S begin\n    a => produce(S) ~ produce\nend\n\n@system SController(Controller) begin\n    s(context) ~ ::S\nend\n\ninstance(SController)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#*Language-extension*","page":"Variable","title":"Language extension","text":"","category":"section"},{"location":"guide/variable/#hold","page":"Variable","title":"hold","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"hold variables are placeholders for variables that are supplied by another system as a mixin.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Supported tags: None","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S1 begin\n    a ~ advance\nend\n\n@system S2(S1, Controller) begin\n    a ~ hold\n    b(a) => 2*a ~ track\nend\n\nsimulate(S2; stop=2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#wrap","page":"Variable","title":"wrap","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"wrap allows passing a reference to the state variable object, not a dereferenced value","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Supported tags: None","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a          => 1       ~ preserve \n    b(a)       => a == a' ~ flag\n    c(wrap(a)) => a == a' ~ flag\nend\n\ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#call","page":"Variable","title":"call","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"call defines a partial function accepting user-defined arguments","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Supported tags: unit","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a => 1 ~ preserve\n    f(a; x) => a + x ~ call\n    b(f) => f(1) ~ track\nend\n\ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#bring","page":"Variable","title":"bring","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"bring duplicates variable declaration from another system into the current system","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Supported tags: parameters, override","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S1 begin\n    a => 1 ~ preserve\n    b(a) => 2a ~ track\nend\n\n@system S2(Controller) begin\n    c(context) ~ bring::S1\nend\n\ninstance(S2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#Variable-Tags","page":"Variable","title":"Variable Tags","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Most variable states have tags in the form of (tag) for tag-specific behaviors. Available tags vary between variable states. Some tags are shared by multiple variable states while some tags are exclusive to certain variable states.","category":"page"},{"location":"guide/variable/#autounit","page":"Variable","title":"autounit","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Allows provide variables to automatically assign units to variables depending on column headers of the DataFrame. By default, autounit is true and only needs to be specified when false.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: provide","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a => DataFrame(\"index\" => (0:2)u\"hr\", \"value (m)\" => 0:10:20) ~ provide\n    b => DataFrame(\"index\" => (0:2)u\"hr\", \"value (m)\" => 0:10:20) ~ provide(autounit=false)\nend","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"instance(S).a","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"instance(S).b","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#by","page":"Variable","title":"by","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Specifies the column and series from which the drive variable receives data. Can be omitted if the variable name is identical to column name.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: drive","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    p => DataFrame(index=(0:2)u\"hr\", a=[2,4,6], x=1:3) ~ provide\n    a ~ drive(from=p)\n    b ~ drive(from=p, by=:x)\nend\n\nsimulate(S; stop=2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#columns","page":"Variable","title":"columns","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Specifies the names of columns from the table created by the tabulate variable.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: tabulate","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    T => [\n      # a b\n        0 4 ; # A\n        1 5 ; # B\n        2 6 ; # C \n        3 7 ; # D\n    ] ~ tabulate(rows=(:A, :B, :C, :D), columns=(:a, :b))\nend\n\ninstance(S).T","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#evalunit","page":"Variable","title":"evalunit","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Specifies the evaluation unit of bisect, as opposed to the unit of solution.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: bisect","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    f(x) => (x/1u\"s\" - 1u\"m/s\") ~ track(u\"m/s\")\n    x(f) ~ bisect(lower=0, upper=2, u\"m\", evalunit=u\"m/s\")\nend\n\ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#extern","page":"Variable","title":"extern","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: preserve, track, flag","category":"page"},{"location":"guide/variable/#from","page":"Variable","title":"from","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"drive: Specifies the DataFrame that the drive variable will receive data from. If the variable name of the drive variable differs from column name, from must be accompanied with by.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"integrate: Specifies lower bound of integration.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: drive, integrate","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example: drive","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    p => DataFrame(index=(0:2)u\"hr\", a=[2,4,6], x=1:3) ~ provide\n    a ~ drive(from=p)\n    b ~ drive(from=p, by=:x)\nend\n\nsimulate(S; stop=2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n Example: integrate","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    w => 1 ~ preserve(parameter)\n    a => 0 ~ preserve(parameter)\n    b => π ~ preserve(parameter)\n    f(w; x) => w*sin(x) ~ integrate(from=a, to=b)\nend\n\ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#index","page":"Variable","title":"index","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by provide variables to specify the index column from provided DataFrame. Can be omitted if DataFrame contains column \"index\".","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: provide","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a => DataFrame(i=(0:3)u\"hr\", value=0:10:30) ~ provide(index=:i)\nend\n        \ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#init","page":"Variable","title":"init","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Assigns the first value of the variable at system instantiation.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: track, remember, accumulate, advance, provide","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a => 1 ~ accumulate(init=100)\nend\n\nsimulate(S; stop=2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#knotunit","page":"Variable","title":"knotunit","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Specifies the unit of discrete x-values of interpolate.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: interpolate","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    m => ([1 => 10, 2 => 20, 3 => 30]) ~ interpolate(u\"s\", knotunit=u\"m\")\n    n(m) ~ interpolate(u\"m\", reverse)\n    a(m) => m(2.5u\"m\") ~ track(u\"s\")\n    b(n) => n(25u\"s\") ~ track(u\"m\")\nend\n\ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#lower","page":"Variable","title":"lower","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Specifies the lower bound of the solution for solve and bisect variables.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: solve, bisect","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"The solution is x = 1, 2, 3","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a => 1 ~ preserve(parameter)\n    b => -6 ~ preserve(parameter)\n    c => 11 ~ preserve(parameter)\n    d => -6 ~ preserve(parameter)\n    x(a, b, c, d) => begin\n        a*x^3 + b*x^2 + c*x + d\n    end ~ solve(lower=1.1, upper=2.9)\nend\n\ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#max","page":"Variable","title":"max","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Defines the maximum value of the variable.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: preserve, track, accumulate, bisect","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a => 1 ~ accumulate(max=1)\nend\n\nsimulate(S; stop=2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#maxiter","page":"Variable","title":"maxiter","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Defines the maximum number of iterations for the bisect.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: bisect","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    x(x) => x - 0.25 ~ bisect(lower=0, upper=1, maxiter=4)\nend\n\ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#min","page":"Variable","title":"min","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Defines the minimum value of the variable.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: preserve, track, accumulate, bisect","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a => -1 ~ accumulate(min=-1)\nend\n\nsimulate(S; stop=2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#once","page":"Variable","title":"once","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Makes a flag variable unable to go from true to false.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: flag","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller)begin\n    a ~ advance(init=1)\n    f(a) => (a % 2 == 0) ~ flag(once)\nend\n\nsimulate(S; stop=2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#optional","page":"Variable","title":"optional","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Makes a preserve variable optional, allowing a system to be instantiated without variable assignment.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: preserve","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a ~ preserve(optional, parameter)\n    b => 1 ~ preserve\nend\n\nsimulate(S; stop=2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#override","page":"Variable","title":"override","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: preserve, track, flag, drive, bring","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S1 begin\n    a ~ track(override)\nend\n\n@system S2(Controller) begin\n    c(context, a) ~ ::S1\n    a => 1 ~ track\nend\n\ninstance(S2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#parameter","page":"Variable","title":"parameter","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Allows the variable to be altered through a configuration at system instantiation.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: preserve, flag, provide, drive, tabulate, interpolate","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a ~ preserve(parameter)\nend\n\ninstance(S; config = :S => :a => 1)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#parameters","page":"Variable","title":"parameters","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Use by bring variables to duplicate only variables that can have the parameter tag (if they did not have the parameter tag originally, they become parameters regardless). The duplicated variables must have their values reassigned through a configuration.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: bring","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S1 begin\n    a => 1 ~ preserve\n    b(a) => 2a ~ track\n    c => true ~ flag\n\n    d(a) ~ accumulate\nend\n\n@system S2(Controller) begin\n    p(context) ~ bring::S1(parameters)\nend\n\ninstance(S2; config = :S2 => (:a => 2, :b => 3, :c => false))","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#pick","page":"Variable","title":"pick","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Picks which solution to return based on tag argument. ","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: solve","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"The solution is x = 1, 2, 3","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a => 1 ~ preserve(parameter)\n    b => -3 ~ preserve(parameter)\n    c => 2 ~ preserve(parameter)\n    x(a, b, c) => begin\n        a*x^2 + b*x + c\n    end ~ solve(pick=:minimum)\nend\n\ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#ref","page":"Variable","title":"ref","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: preserve, track","category":"page"},{"location":"guide/variable/#reset","page":"Variable","title":"reset","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Resets the sum to 0 at every time step.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: accumulate","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a => 1 ~ accumulate(reset)\nend\n\nsimulate(S; stop=2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#reverse","page":"Variable","title":"reverse","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Returns the inverse function of an existing interpolate variable.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: interpolate","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    m => ([1 => 10, 2 => 20, 3 => 30]) ~ interpolate\n    n(m) ~ interpolate(reverse)\n    a(m) => m(2.5) ~ preserve\n    b(n) => n(25) ~ preserve\nend\n\ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#round","page":"Variable","title":"round","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Rounds to the nearest integer or to a floor or ceiling based on tag argument.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: preserve, track","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a => 1.4 ~ preserve(round)\n    b => 1.4 ~ preserve(round=:round)\n    c => 1.4 ~ preserve(round=:ceil)\n    d => 1.6 ~ preserve(round=:floor)\n    e => 1.6 ~ preserve(round=:trunc) \nend\n\ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#rows","page":"Variable","title":"rows","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Specifies the names of rows from the table created by the tabulate variable. Required tag for tabulate.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: tabulate","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    T => [\n      # a b\n        0 4 ; # A\n        1 5 ; # B\n        2 6 ; # C \n        3 7 ; # D\n    ] ~ tabulate(rows=(:A, :B, :C, :D), columns=(:a, :b))\nend","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#single","page":"Variable","title":"single","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: produce","category":"page"},{"location":"guide/variable/#skip","page":"Variable","title":"skip","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: track","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a ~ advance\n    b(a) => 2*a ~ track(skip=true)\nend\n\nsimulate(S; stop=2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#step","page":"Variable","title":"step","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"advance: Specifies the increments of the advance variable.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"provide: Specifies the intervals of the index column.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: advance, provide","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example: advance","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a ~ advance\n    b ~ advance(step=2)\n    c ~ advance(step=-1)\nend\n\nsimulate(S; stop=2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n Example: integrate","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a => DataFrame(\"index (hr)\" => 0:4, \"value (m)\" => 0:10:40) ~ provide(step=2u\"hr\")\nend\n\ninstance(S).a","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#tick","page":"Variable","title":"tick","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: drive","category":"page"},{"location":"guide/variable/#time","page":"Variable","title":"time","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Accumulates variable at a specified rate of time.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: accumulate, capture","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    t(x=context.clock.time) => 0.5x ~ track(u\"hr\")\n    a => 1 ~ accumulate\n    b => 1 ~ accumulate(time=t)\nend\n\nsimulate(S; stop=5)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#timeunit","page":"Variable","title":"timeunit","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Specifies the time unit of the variable.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: accumulate, capture","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a => 1 ~ accumulate(timeunit=u\"d\")\nend\n\nsimulate(S; stop=2)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#to","page":"Variable","title":"to","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Specifies upper bound of integration.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: integrate","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    w => 1 ~ preserve(parameter)\n    a => 0 ~ preserve(parameter)\n    b => π ~ preserve(parameter)\n    f(w; x) => w*sin(x) ~ integrate(from=a, to=b)\nend\n\ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#tol","page":"Variable","title":"tol","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Defines the tolerance for the bisection method used in bisect.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: bisect","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    x(x) => x - 2.7 ~ bisect(lower=1, upper=3)\n    y(y) => y - 2.7 ~ bisect(lower=1, upper=3, tol=0.05)\nend\n\ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#unit","page":"Variable","title":"unit","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Specifies the unit of the variable. The tag unit can be omitted.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: preserve, track, remember, accumulate, capture, integrate, advance, drive, tabulate, interpolate, solve, bisect, call","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a => 1 ~ preserve(unit=u\"hr\")\n    b => 1 ~ preserve(u\"hr\")\nend\n\ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#upper","page":"Variable","title":"upper","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Specifies the upper bound of solution.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: solve, bisect","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"The solution is x = 1, 2, 3","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a => 1 ~ preserve(parameter)\n    b => -6 ~ preserve(parameter)\n    c => 11 ~ preserve(parameter)\n    d => -6 ~ preserve(parameter)\n    x(a, b, c, d) => begin\n        a*x^3 + b*x^2 + c*x + d\n    end ~ solve(upper=2.9)\nend\n\ninstance(S)","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"\n","category":"page"},{"location":"guide/variable/#when","page":"Variable","title":"when","text":"","category":"section"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Specifies when a variable should be evaluated. It is supplied with a flag variable, and the specified variable is evaluated when the flag variable is true.","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Used by: track, flag, remember, accumulate, capture, produce","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"Example","category":"page"},{"location":"guide/variable/","page":"Variable","title":"Variable","text":"@system S(Controller) begin\n    a ~ advance\n    flag(a) => (a >= 2) ~ flag\n    b(a) => a ~ track(when=flag)\nend\n\nsimulate(S; stop=3u\"hr\")","category":"page"}]
}
